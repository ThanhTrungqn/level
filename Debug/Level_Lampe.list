
Level_Lampe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051ac  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800535c  0800535c  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005374  08005374  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800537c  0800537c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  2000000c  08005390  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08005390  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001109a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002380  00000000  00000000  000310d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011e8  00000000  00000000  00033458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c0  00000000  00000000  00034640  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024d6d  00000000  00000000  00035700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d714  00000000  00000000  0005a46d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df5ad  00000000  00000000  00067b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014712e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d94  00000000  00000000  001471ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005344 	.word	0x08005344

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08005344 	.word	0x08005344

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295
 80009e0:	f000 b972 	b.w	8000cc8 <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9e08      	ldr	r6, [sp, #32]
 8000a02:	4604      	mov	r4, r0
 8000a04:	4688      	mov	r8, r1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d14b      	bne.n	8000aa2 <__udivmoddi4+0xa6>
 8000a0a:	428a      	cmp	r2, r1
 8000a0c:	4615      	mov	r5, r2
 8000a0e:	d967      	bls.n	8000ae0 <__udivmoddi4+0xe4>
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	b14a      	cbz	r2, 8000a2a <__udivmoddi4+0x2e>
 8000a16:	f1c2 0720 	rsb	r7, r2, #32
 8000a1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a1e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a22:	4095      	lsls	r5, r2
 8000a24:	ea47 0803 	orr.w	r8, r7, r3
 8000a28:	4094      	lsls	r4, r2
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	0c23      	lsrs	r3, r4, #16
 8000a30:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a34:	fa1f fc85 	uxth.w	ip, r5
 8000a38:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a40:	fb07 f10c 	mul.w	r1, r7, ip
 8000a44:	4299      	cmp	r1, r3
 8000a46:	d909      	bls.n	8000a5c <__udivmoddi4+0x60>
 8000a48:	18eb      	adds	r3, r5, r3
 8000a4a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a4e:	f080 811b 	bcs.w	8000c88 <__udivmoddi4+0x28c>
 8000a52:	4299      	cmp	r1, r3
 8000a54:	f240 8118 	bls.w	8000c88 <__udivmoddi4+0x28c>
 8000a58:	3f02      	subs	r7, #2
 8000a5a:	442b      	add	r3, r5
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	b2a4      	uxth	r4, r4
 8000a60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a6c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a70:	45a4      	cmp	ip, r4
 8000a72:	d909      	bls.n	8000a88 <__udivmoddi4+0x8c>
 8000a74:	192c      	adds	r4, r5, r4
 8000a76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a7a:	f080 8107 	bcs.w	8000c8c <__udivmoddi4+0x290>
 8000a7e:	45a4      	cmp	ip, r4
 8000a80:	f240 8104 	bls.w	8000c8c <__udivmoddi4+0x290>
 8000a84:	3802      	subs	r0, #2
 8000a86:	442c      	add	r4, r5
 8000a88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a8c:	eba4 040c 	sub.w	r4, r4, ip
 8000a90:	2700      	movs	r7, #0
 8000a92:	b11e      	cbz	r6, 8000a9c <__udivmoddi4+0xa0>
 8000a94:	40d4      	lsrs	r4, r2
 8000a96:	2300      	movs	r3, #0
 8000a98:	e9c6 4300 	strd	r4, r3, [r6]
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	428b      	cmp	r3, r1
 8000aa4:	d909      	bls.n	8000aba <__udivmoddi4+0xbe>
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	f000 80eb 	beq.w	8000c82 <__udivmoddi4+0x286>
 8000aac:	2700      	movs	r7, #0
 8000aae:	e9c6 0100 	strd	r0, r1, [r6]
 8000ab2:	4638      	mov	r0, r7
 8000ab4:	4639      	mov	r1, r7
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	fab3 f783 	clz	r7, r3
 8000abe:	2f00      	cmp	r7, #0
 8000ac0:	d147      	bne.n	8000b52 <__udivmoddi4+0x156>
 8000ac2:	428b      	cmp	r3, r1
 8000ac4:	d302      	bcc.n	8000acc <__udivmoddi4+0xd0>
 8000ac6:	4282      	cmp	r2, r0
 8000ac8:	f200 80fa 	bhi.w	8000cc0 <__udivmoddi4+0x2c4>
 8000acc:	1a84      	subs	r4, r0, r2
 8000ace:	eb61 0303 	sbc.w	r3, r1, r3
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	4698      	mov	r8, r3
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d0e0      	beq.n	8000a9c <__udivmoddi4+0xa0>
 8000ada:	e9c6 4800 	strd	r4, r8, [r6]
 8000ade:	e7dd      	b.n	8000a9c <__udivmoddi4+0xa0>
 8000ae0:	b902      	cbnz	r2, 8000ae4 <__udivmoddi4+0xe8>
 8000ae2:	deff      	udf	#255	; 0xff
 8000ae4:	fab2 f282 	clz	r2, r2
 8000ae8:	2a00      	cmp	r2, #0
 8000aea:	f040 808f 	bne.w	8000c0c <__udivmoddi4+0x210>
 8000aee:	1b49      	subs	r1, r1, r5
 8000af0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000af4:	fa1f f885 	uxth.w	r8, r5
 8000af8:	2701      	movs	r7, #1
 8000afa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b08:	fb08 f10c 	mul.w	r1, r8, ip
 8000b0c:	4299      	cmp	r1, r3
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x124>
 8000b10:	18eb      	adds	r3, r5, r3
 8000b12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x122>
 8000b18:	4299      	cmp	r1, r3
 8000b1a:	f200 80cd 	bhi.w	8000cb8 <__udivmoddi4+0x2bc>
 8000b1e:	4684      	mov	ip, r0
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	b2a3      	uxth	r3, r4
 8000b24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b28:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b30:	fb08 f800 	mul.w	r8, r8, r0
 8000b34:	45a0      	cmp	r8, r4
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x14c>
 8000b38:	192c      	adds	r4, r5, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x14a>
 8000b40:	45a0      	cmp	r8, r4
 8000b42:	f200 80b6 	bhi.w	8000cb2 <__udivmoddi4+0x2b6>
 8000b46:	4618      	mov	r0, r3
 8000b48:	eba4 0408 	sub.w	r4, r4, r8
 8000b4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b50:	e79f      	b.n	8000a92 <__udivmoddi4+0x96>
 8000b52:	f1c7 0c20 	rsb	ip, r7, #32
 8000b56:	40bb      	lsls	r3, r7
 8000b58:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b5c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b60:	fa01 f407 	lsl.w	r4, r1, r7
 8000b64:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b68:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b70:	4325      	orrs	r5, r4
 8000b72:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b76:	0c2c      	lsrs	r4, r5, #16
 8000b78:	fb08 3319 	mls	r3, r8, r9, r3
 8000b7c:	fa1f fa8e 	uxth.w	sl, lr
 8000b80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b84:	fb09 f40a 	mul.w	r4, r9, sl
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	fa02 f207 	lsl.w	r2, r2, r7
 8000b8e:	fa00 f107 	lsl.w	r1, r0, r7
 8000b92:	d90b      	bls.n	8000bac <__udivmoddi4+0x1b0>
 8000b94:	eb1e 0303 	adds.w	r3, lr, r3
 8000b98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b9c:	f080 8087 	bcs.w	8000cae <__udivmoddi4+0x2b2>
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	f240 8084 	bls.w	8000cae <__udivmoddi4+0x2b2>
 8000ba6:	f1a9 0902 	sub.w	r9, r9, #2
 8000baa:	4473      	add	r3, lr
 8000bac:	1b1b      	subs	r3, r3, r4
 8000bae:	b2ad      	uxth	r5, r5
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bbc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bc0:	45a2      	cmp	sl, r4
 8000bc2:	d908      	bls.n	8000bd6 <__udivmoddi4+0x1da>
 8000bc4:	eb1e 0404 	adds.w	r4, lr, r4
 8000bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bcc:	d26b      	bcs.n	8000ca6 <__udivmoddi4+0x2aa>
 8000bce:	45a2      	cmp	sl, r4
 8000bd0:	d969      	bls.n	8000ca6 <__udivmoddi4+0x2aa>
 8000bd2:	3802      	subs	r0, #2
 8000bd4:	4474      	add	r4, lr
 8000bd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bda:	fba0 8902 	umull	r8, r9, r0, r2
 8000bde:	eba4 040a 	sub.w	r4, r4, sl
 8000be2:	454c      	cmp	r4, r9
 8000be4:	46c2      	mov	sl, r8
 8000be6:	464b      	mov	r3, r9
 8000be8:	d354      	bcc.n	8000c94 <__udivmoddi4+0x298>
 8000bea:	d051      	beq.n	8000c90 <__udivmoddi4+0x294>
 8000bec:	2e00      	cmp	r6, #0
 8000bee:	d069      	beq.n	8000cc4 <__udivmoddi4+0x2c8>
 8000bf0:	ebb1 050a 	subs.w	r5, r1, sl
 8000bf4:	eb64 0403 	sbc.w	r4, r4, r3
 8000bf8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bfc:	40fd      	lsrs	r5, r7
 8000bfe:	40fc      	lsrs	r4, r7
 8000c00:	ea4c 0505 	orr.w	r5, ip, r5
 8000c04:	e9c6 5400 	strd	r5, r4, [r6]
 8000c08:	2700      	movs	r7, #0
 8000c0a:	e747      	b.n	8000a9c <__udivmoddi4+0xa0>
 8000c0c:	f1c2 0320 	rsb	r3, r2, #32
 8000c10:	fa20 f703 	lsr.w	r7, r0, r3
 8000c14:	4095      	lsls	r5, r2
 8000c16:	fa01 f002 	lsl.w	r0, r1, r2
 8000c1a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c22:	4338      	orrs	r0, r7
 8000c24:	0c01      	lsrs	r1, r0, #16
 8000c26:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c2a:	fa1f f885 	uxth.w	r8, r5
 8000c2e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c36:	fb07 f308 	mul.w	r3, r7, r8
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x256>
 8000c42:	1869      	adds	r1, r5, r1
 8000c44:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c48:	d22f      	bcs.n	8000caa <__udivmoddi4+0x2ae>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d92d      	bls.n	8000caa <__udivmoddi4+0x2ae>
 8000c4e:	3f02      	subs	r7, #2
 8000c50:	4429      	add	r1, r5
 8000c52:	1acb      	subs	r3, r1, r3
 8000c54:	b281      	uxth	r1, r0
 8000c56:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c5a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c62:	fb00 f308 	mul.w	r3, r0, r8
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x27e>
 8000c6a:	1869      	adds	r1, r5, r1
 8000c6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c70:	d217      	bcs.n	8000ca2 <__udivmoddi4+0x2a6>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d915      	bls.n	8000ca2 <__udivmoddi4+0x2a6>
 8000c76:	3802      	subs	r0, #2
 8000c78:	4429      	add	r1, r5
 8000c7a:	1ac9      	subs	r1, r1, r3
 8000c7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c80:	e73b      	b.n	8000afa <__udivmoddi4+0xfe>
 8000c82:	4637      	mov	r7, r6
 8000c84:	4630      	mov	r0, r6
 8000c86:	e709      	b.n	8000a9c <__udivmoddi4+0xa0>
 8000c88:	4607      	mov	r7, r0
 8000c8a:	e6e7      	b.n	8000a5c <__udivmoddi4+0x60>
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	e6fb      	b.n	8000a88 <__udivmoddi4+0x8c>
 8000c90:	4541      	cmp	r1, r8
 8000c92:	d2ab      	bcs.n	8000bec <__udivmoddi4+0x1f0>
 8000c94:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c98:	eb69 020e 	sbc.w	r2, r9, lr
 8000c9c:	3801      	subs	r0, #1
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	e7a4      	b.n	8000bec <__udivmoddi4+0x1f0>
 8000ca2:	4660      	mov	r0, ip
 8000ca4:	e7e9      	b.n	8000c7a <__udivmoddi4+0x27e>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	e795      	b.n	8000bd6 <__udivmoddi4+0x1da>
 8000caa:	4667      	mov	r7, ip
 8000cac:	e7d1      	b.n	8000c52 <__udivmoddi4+0x256>
 8000cae:	4681      	mov	r9, r0
 8000cb0:	e77c      	b.n	8000bac <__udivmoddi4+0x1b0>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	442c      	add	r4, r5
 8000cb6:	e747      	b.n	8000b48 <__udivmoddi4+0x14c>
 8000cb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cbc:	442b      	add	r3, r5
 8000cbe:	e72f      	b.n	8000b20 <__udivmoddi4+0x124>
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	e708      	b.n	8000ad6 <__udivmoddi4+0xda>
 8000cc4:	4637      	mov	r7, r6
 8000cc6:	e6e9      	b.n	8000a9c <__udivmoddi4+0xa0>

08000cc8 <__aeabi_idiv0>:
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <Lexi_Init_Data>:
 *
 */

LEXILIGHT_DATA lexilight;

void Lexi_Init_Data() {
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	lexilight.system_clock 		= SYSTEM_CLOCK_PER_SECOND;
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <Lexi_Init_Data+0x54>)
 8000cd2:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <Lexi_Init_Data+0x58>)
 8000cd4:	601a      	str	r2, [r3, #0]
	lexilight.duty_min 			= LEXILIGHT_DUTY_MIN;
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <Lexi_Init_Data+0x54>)
 8000cd8:	220a      	movs	r2, #10
 8000cda:	619a      	str	r2, [r3, #24]
	lexilight.duty_max 			= LEXILIGHT_DUTY_MAX;
 8000cdc:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <Lexi_Init_Data+0x54>)
 8000cde:	2228      	movs	r2, #40	; 0x28
 8000ce0:	615a      	str	r2, [r3, #20]
	lexilight.duty_cmd 			= LEXILIGHT_DUTY_DEFAULT;
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <Lexi_Init_Data+0x54>)
 8000ce4:	2214      	movs	r2, #20
 8000ce6:	60da      	str	r2, [r3, #12]
	lexilight.duty				= 30;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <Lexi_Init_Data+0x54>)
 8000cea:	221e      	movs	r2, #30
 8000cec:	605a      	str	r2, [r3, #4]
	lexilight.freq_max 			= LEXILIGHT_FREQUENCY_MAX;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <Lexi_Init_Data+0x54>)
 8000cf0:	2278      	movs	r2, #120	; 0x78
 8000cf2:	61da      	str	r2, [r3, #28]
	lexilight.freq_min 			= LEXILIGHT_FREQUENCY_MIN;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <Lexi_Init_Data+0x54>)
 8000cf6:	2241      	movs	r2, #65	; 0x41
 8000cf8:	621a      	str	r2, [r3, #32]
	lexilight.freq_cmd 			= LEXILIGHT_FREQUENCY_DEFAULT;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <Lexi_Init_Data+0x54>)
 8000cfc:	2250      	movs	r2, #80	; 0x50
 8000cfe:	611a      	str	r2, [r3, #16]
	lexilight.freq				= 90;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <Lexi_Init_Data+0x54>)
 8000d02:	225a      	movs	r2, #90	; 0x5a
 8000d04:	609a      	str	r2, [r3, #8]
	lexilight.lum_level 		= LIGHT_LUM_LEVEL_0;
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <Lexi_Init_Data+0x54>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	lexilight.state 			= LIGHT_STATE_WAIT_500_MS;
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <Lexi_Init_Data+0x54>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	20000028 	.word	0x20000028
 8000d24:	00f42400 	.word	0x00f42400

08000d28 <Lexi_Task>:


void Lexi_Task (TIM_HandleTypeDef htim_pwm_led, TIM_HandleTypeDef htim_pwm_lum_driver){
 8000d28:	b084      	sub	sp, #16
 8000d2a:	b5b0      	push	{r4, r5, r7, lr}
 8000d2c:	b08c      	sub	sp, #48	; 0x30
 8000d2e:	af0c      	add	r7, sp, #48	; 0x30
 8000d30:	f107 0410 	add.w	r4, r7, #16
 8000d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch (lexilight.state)
 8000d38:	4b68      	ldr	r3, [pc, #416]	; (8000edc <Lexi_Task+0x1b4>)
 8000d3a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	f200 80c0 	bhi.w	8000ec4 <Lexi_Task+0x19c>
 8000d44:	a201      	add	r2, pc, #4	; (adr r2, 8000d4c <Lexi_Task+0x24>)
 8000d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4a:	bf00      	nop
 8000d4c:	08000d69 	.word	0x08000d69
 8000d50:	08000d77 	.word	0x08000d77
 8000d54:	08000d89 	.word	0x08000d89
 8000d58:	08000ddb 	.word	0x08000ddb
 8000d5c:	08000e29 	.word	0x08000e29
 8000d60:	08000e77 	.word	0x08000e77
 8000d64:	08000d69 	.word	0x08000d69
	{
		case LIGHT_STATE_ERROR:
		case LIGHT_STATE_INIT:
			Lexi_Init_Data();
 8000d68:	f7ff ffb0 	bl	8000ccc <Lexi_Init_Data>
			lexilight.state = LIGHT_STATE_WAIT_500_MS;
 8000d6c:	4b5b      	ldr	r3, [pc, #364]	; (8000edc <Lexi_Task+0x1b4>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			break;
 8000d74:	e0ab      	b.n	8000ece <Lexi_Task+0x1a6>

		case LIGHT_STATE_WAIT_500_MS:
			HAL_Delay(500);
 8000d76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d7a:	f001 fbf5 	bl	8002568 <HAL_Delay>
			lexilight.state = LIGHT_STATE_SERVICE;
 8000d7e:	4b57      	ldr	r3, [pc, #348]	; (8000edc <Lexi_Task+0x1b4>)
 8000d80:	2202      	movs	r2, #2
 8000d82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			break;
 8000d86:	e0a2      	b.n	8000ece <Lexi_Task+0x1a6>

		case LIGHT_STATE_SERVICE:

			//Get pwm defaut or eeprom
			Lexi_DO_LED_PWM (htim_pwm_led);
 8000d88:	466d      	mov	r5, sp
 8000d8a:	f107 0420 	add.w	r4, r7, #32
 8000d8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000da4:	f000 f89e 	bl	8000ee4 <Lexi_DO_LED_PWM>
			Lexi_DO_PWM_LUM_DRIVER(htim_pwm_lum_driver);
 8000da8:	466d      	mov	r5, sp
 8000daa:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000dbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc4:	f000 f8fc 	bl	8000fc0 <Lexi_DO_PWM_LUM_DRIVER>

			//Program for test: wait 1s and turn on LED
			HAL_Delay(1000);
 8000dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dcc:	f001 fbcc 	bl	8002568 <HAL_Delay>
			lexilight.state =LIGHT_STATE_ON;
 8000dd0:	4b42      	ldr	r3, [pc, #264]	; (8000edc <Lexi_Task+0x1b4>)
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			break;
 8000dd8:	e079      	b.n	8000ece <Lexi_Task+0x1a6>

		case LIGHT_STATE_ON:
			Lexi_DO_LED_PWM (htim_pwm_led);
 8000dda:	466d      	mov	r5, sp
 8000ddc:	f107 0420 	add.w	r4, r7, #32
 8000de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df6:	f000 f875 	bl	8000ee4 <Lexi_DO_LED_PWM>
			Lexi_DO_PWM_LUM_DRIVER(htim_pwm_lum_driver);
 8000dfa:	466d      	mov	r5, sp
 8000dfc:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e0c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e16:	f000 f8d3 	bl	8000fc0 <Lexi_DO_PWM_LUM_DRIVER>
			//Turn On EN_DRIVER
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e20:	482f      	ldr	r0, [pc, #188]	; (8000ee0 <Lexi_Task+0x1b8>)
 8000e22:	f001 ffb9 	bl	8002d98 <HAL_GPIO_WritePin>
			break;
 8000e26:	e052      	b.n	8000ece <Lexi_Task+0x1a6>

		case LIGHT_STATE_STANDARD:
			Lexi_DO_Standard_PWM(htim_pwm_led);
 8000e28:	466d      	mov	r5, sp
 8000e2a:	f107 0420 	add.w	r4, r7, #32
 8000e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e44:	f000 f8a4 	bl	8000f90 <Lexi_DO_Standard_PWM>
			Lexi_DO_PWM_LUM_DRIVER(htim_pwm_lum_driver);
 8000e48:	466d      	mov	r5, sp
 8000e4a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e5a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e64:	f000 f8ac 	bl	8000fc0 <Lexi_DO_PWM_LUM_DRIVER>
			//Turn On EN_DRIVER
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6e:	481c      	ldr	r0, [pc, #112]	; (8000ee0 <Lexi_Task+0x1b8>)
 8000e70:	f001 ff92 	bl	8002d98 <HAL_GPIO_WritePin>
			break;
 8000e74:	e02b      	b.n	8000ece <Lexi_Task+0x1a6>

		case LIGHT_STATE_OFF:
			Lexi_DO_LED_PWM (htim_pwm_led);
 8000e76:	466d      	mov	r5, sp
 8000e78:	f107 0420 	add.w	r4, r7, #32
 8000e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e88:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e92:	f000 f827 	bl	8000ee4 <Lexi_DO_LED_PWM>
			Lexi_DO_PWM_LUM_DRIVER(htim_pwm_lum_driver);
 8000e96:	466d      	mov	r5, sp
 8000e98:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ea4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ea8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000eac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eb2:	f000 f885 	bl	8000fc0 <Lexi_DO_PWM_LUM_DRIVER>
			//Turn OFF EN_DRIVER
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebc:	4808      	ldr	r0, [pc, #32]	; (8000ee0 <Lexi_Task+0x1b8>)
 8000ebe:	f001 ff6b 	bl	8002d98 <HAL_GPIO_WritePin>
			break;
 8000ec2:	e004      	b.n	8000ece <Lexi_Task+0x1a6>
		default:
			lexilight.state = LIGHT_STATE_ERROR;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <Lexi_Task+0x1b4>)
 8000ec6:	2206      	movs	r2, #6
 8000ec8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			break;
 8000ecc:	bf00      	nop
		}
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ed6:	b004      	add	sp, #16
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000028 	.word	0x20000028
 8000ee0:	40020c00 	.word	0x40020c00

08000ee4 <Lexi_DO_LED_PWM>:

void Lexi_DO_LED_PWM (TIM_HandleTypeDef htim){
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	f107 0c10 	add.w	ip, r7, #16
 8000ef0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Check update Freq
	if ((	lexilight.freq_cmd >= lexilight.freq_min)
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d323      	bcc.n	8000f48 <Lexi_DO_LED_PWM+0x64>
			&& (lexilight.freq_cmd <= lexilight.freq_max)
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d81d      	bhi.n	8000f48 <Lexi_DO_LED_PWM+0x64>
			&& (lexilight.freq != lexilight.freq_cmd))
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d017      	beq.n	8000f48 <Lexi_DO_LED_PWM+0x64>
	{
		lexilight.freq = lexilight.freq_cmd;	//Update New value of ADC Duty;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f1e:	6093      	str	r3, [r2, #8]
		int prescaler = (uint16_t)(lexilight.system_clock/(lexilight.freq*100) - 1);
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2164      	movs	r1, #100	; 0x64
 8000f2a:	fb01 f303 	mul.w	r3, r1, r3
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	3b01      	subs	r3, #1
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_PRESCALER(&htim, prescaler);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
		lexilight.freq = lexilight.freq_cmd;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f46:	6093      	str	r3, [r2, #8]
	}

	//Check update Dutycycle
	if ((	lexilight.duty_cmd >= lexilight.duty_min)
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d313      	bcc.n	8000f7c <Lexi_DO_LED_PWM+0x98>
			&& (lexilight.duty_cmd <= lexilight.duty_max)
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d80d      	bhi.n	8000f7c <Lexi_DO_LED_PWM+0x98>
			&& (lexilight.duty != lexilight.duty_cmd))
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d007      	beq.n	8000f7c <Lexi_DO_LED_PWM+0x98>
	{
		lexilight.duty = lexilight.duty_cmd;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f72:	6053      	str	r3, [r2, #4]
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_2,lexilight.duty);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <Lexi_DO_LED_PWM+0xa8>)
 8000f78:	6852      	ldr	r2, [r2, #4]
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	b004      	add	sp, #16
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000028 	.word	0x20000028

08000f90 <Lexi_DO_Standard_PWM>:

void Lexi_DO_Standard_PWM (TIM_HandleTypeDef htim){
 8000f90:	b084      	sub	sp, #16
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	f107 0c10 	add.w	ip, r7, #16
 8000f9c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		int prescaler = 59;		//Set frequency 119 = 4KHZ
 8000fa0:	233b      	movs	r3, #59	; 0x3b
 8000fa2:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_PRESCALER(&htim, prescaler);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
		//__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_2, lexilight.duty);
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_2, 100);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	2264      	movs	r2, #100	; 0x64
 8000fae:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	b004      	add	sp, #16
 8000fbc:	4770      	bx	lr
	...

08000fc0 <Lexi_DO_PWM_LUM_DRIVER>:

void Lexi_DO_PWM_LUM_DRIVER (TIM_HandleTypeDef htim){
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	b590      	push	{r4, r7, lr}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	f107 0420 	add.w	r4, r7, #32
 8000fcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//Todo :  do the  signal PWM_LUM_DRIVER
	unsigned int lux_cmd = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
	unsigned int value = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
	unsigned int value_2 = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
	switch (lexilight.lum_level){
 8000fdc:	4b92      	ldr	r3, [pc, #584]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 8000fde:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d05f      	beq.n	80010a6 <Lexi_DO_PWM_LUM_DRIVER+0xe6>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	f000 80b7 	beq.w	800115a <Lexi_DO_PWM_LUM_DRIVER+0x19a>
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d000      	beq.n	8000ff2 <Lexi_DO_PWM_LUM_DRIVER+0x32>
			}
			__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_1, value);
			break;

		default:
			break;
 8000ff0:	e10c      	b.n	800120c <Lexi_DO_PWM_LUM_DRIVER+0x24c>
			if (lexilight.duty <= 20){
 8000ff2:	4b8d      	ldr	r3, [pc, #564]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b14      	cmp	r3, #20
 8000ff8:	d810      	bhi.n	800101c <Lexi_DO_PWM_LUM_DRIVER+0x5c>
				lux_cmd =  900 + (1400 - 900)*(lexilight.duty - 10)/10;
 8000ffa:	4b8b      	ldr	r3, [pc, #556]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 800100a:	3b08      	subs	r3, #8
 800100c:	4a87      	ldr	r2, [pc, #540]	; (800122c <Lexi_DO_PWM_LUM_DRIVER+0x26c>)
 800100e:	fba2 2303 	umull	r2, r3, r2, r3
 8001012:	08db      	lsrs	r3, r3, #3
 8001014:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e002      	b.n	8001022 <Lexi_DO_PWM_LUM_DRIVER+0x62>
				lux_cmd =  1400;
 800101c:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001020:	60fb      	str	r3, [r7, #12]
			if (lexilight.state  == LIGHT_STATE_STANDARD){
 8001022:	4b81      	ldr	r3, [pc, #516]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 8001024:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001028:	2b04      	cmp	r3, #4
 800102a:	d11c      	bne.n	8001066 <Lexi_DO_PWM_LUM_DRIVER+0xa6>
				value_2 = (unsigned int)(lux_cmd / 100) ;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4a80      	ldr	r2, [pc, #512]	; (8001230 <Lexi_DO_PWM_LUM_DRIVER+0x270>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	095b      	lsrs	r3, r3, #5
 8001036:	607b      	str	r3, [r7, #4]
				value  = (unsigned int)((140 - value_2)*0.77);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f1c3 038c 	rsb	r3, r3, #140	; 0x8c
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa18 	bl	8000474 <__aeabi_ui2d>
 8001044:	a376      	add	r3, pc, #472	; (adr r3, 8001220 <Lexi_DO_PWM_LUM_DRIVER+0x260>)
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	f7ff fa8d 	bl	8000568 <__aeabi_dmul>
 800104e:	4603      	mov	r3, r0
 8001050:	460c      	mov	r4, r1
 8001052:	4618      	mov	r0, r3
 8001054:	4621      	mov	r1, r4
 8001056:	f7ff fc99 	bl	800098c <__aeabi_d2uiz>
 800105a:	4603      	mov	r3, r0
 800105c:	60bb      	str	r3, [r7, #8]
				lexilight.pwm_led_driver = value;
 800105e:	4a72      	ldr	r2, [pc, #456]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	6453      	str	r3, [r2, #68]	; 0x44
 8001064:	e01b      	b.n	800109e <Lexi_DO_PWM_LUM_DRIVER+0xde>
				value_2 = (unsigned int)(lux_cmd / lexilight.duty) ;
 8001066:	4b70      	ldr	r3, [pc, #448]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001070:	607b      	str	r3, [r7, #4]
				value  = (unsigned int)((140 - value_2)*0.77);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f1c3 038c 	rsb	r3, r3, #140	; 0x8c
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f9fb 	bl	8000474 <__aeabi_ui2d>
 800107e:	a368      	add	r3, pc, #416	; (adr r3, 8001220 <Lexi_DO_PWM_LUM_DRIVER+0x260>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fa70 	bl	8000568 <__aeabi_dmul>
 8001088:	4603      	mov	r3, r0
 800108a:	460c      	mov	r4, r1
 800108c:	4618      	mov	r0, r3
 800108e:	4621      	mov	r1, r4
 8001090:	f7ff fc7c 	bl	800098c <__aeabi_d2uiz>
 8001094:	4603      	mov	r3, r0
 8001096:	60bb      	str	r3, [r7, #8]
				lexilight.pwm_led_driver = value;
 8001098:	4a63      	ldr	r2, [pc, #396]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
			__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_1, value);
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80010a4:	e0b2      	b.n	800120c <Lexi_DO_PWM_LUM_DRIVER+0x24c>
			if (lexilight.duty <= 20){
 80010a6:	4b60      	ldr	r3, [pc, #384]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b14      	cmp	r3, #20
 80010ac:	d810      	bhi.n	80010d0 <Lexi_DO_PWM_LUM_DRIVER+0x110>
				lux_cmd =  1000 + (2200 - 1000)*(lexilight.duty - 10)/10;
 80010ae:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80010b6:	fb02 f303 	mul.w	r3, r2, r3
 80010ba:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 80010be:	3b20      	subs	r3, #32
 80010c0:	4a5a      	ldr	r2, [pc, #360]	; (800122c <Lexi_DO_PWM_LUM_DRIVER+0x26c>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	08db      	lsrs	r3, r3, #3
 80010c8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	e002      	b.n	80010d6 <Lexi_DO_PWM_LUM_DRIVER+0x116>
				lux_cmd =  2200;
 80010d0:	f640 0398 	movw	r3, #2200	; 0x898
 80010d4:	60fb      	str	r3, [r7, #12]
			if (lexilight.state  == LIGHT_STATE_STANDARD){
 80010d6:	4b54      	ldr	r3, [pc, #336]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 80010d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d11c      	bne.n	800111a <Lexi_DO_PWM_LUM_DRIVER+0x15a>
				value_2 = (unsigned int)(lux_cmd / 100) ;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4a53      	ldr	r2, [pc, #332]	; (8001230 <Lexi_DO_PWM_LUM_DRIVER+0x270>)
 80010e4:	fba2 2303 	umull	r2, r3, r2, r3
 80010e8:	095b      	lsrs	r3, r3, #5
 80010ea:	607b      	str	r3, [r7, #4]
				value  = (unsigned int)((140 - value_2)*0.77);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f1c3 038c 	rsb	r3, r3, #140	; 0x8c
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f9be 	bl	8000474 <__aeabi_ui2d>
 80010f8:	a349      	add	r3, pc, #292	; (adr r3, 8001220 <Lexi_DO_PWM_LUM_DRIVER+0x260>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff fa33 	bl	8000568 <__aeabi_dmul>
 8001102:	4603      	mov	r3, r0
 8001104:	460c      	mov	r4, r1
 8001106:	4618      	mov	r0, r3
 8001108:	4621      	mov	r1, r4
 800110a:	f7ff fc3f 	bl	800098c <__aeabi_d2uiz>
 800110e:	4603      	mov	r3, r0
 8001110:	60bb      	str	r3, [r7, #8]
				lexilight.pwm_led_driver = value;
 8001112:	4a45      	ldr	r2, [pc, #276]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	6453      	str	r3, [r2, #68]	; 0x44
 8001118:	e01b      	b.n	8001152 <Lexi_DO_PWM_LUM_DRIVER+0x192>
				value_2 = (unsigned int)(lux_cmd / lexilight.duty) ;
 800111a:	4b43      	ldr	r3, [pc, #268]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	fbb2 f3f3 	udiv	r3, r2, r3
 8001124:	607b      	str	r3, [r7, #4]
				value  = (unsigned int)((140 - value_2)*0.77);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f1c3 038c 	rsb	r3, r3, #140	; 0x8c
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f9a1 	bl	8000474 <__aeabi_ui2d>
 8001132:	a33b      	add	r3, pc, #236	; (adr r3, 8001220 <Lexi_DO_PWM_LUM_DRIVER+0x260>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff fa16 	bl	8000568 <__aeabi_dmul>
 800113c:	4603      	mov	r3, r0
 800113e:	460c      	mov	r4, r1
 8001140:	4618      	mov	r0, r3
 8001142:	4621      	mov	r1, r4
 8001144:	f7ff fc22 	bl	800098c <__aeabi_d2uiz>
 8001148:	4603      	mov	r3, r0
 800114a:	60bb      	str	r3, [r7, #8]
				lexilight.pwm_led_driver = value;
 800114c:	4a36      	ldr	r2, [pc, #216]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
			__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_1, value);
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001158:	e058      	b.n	800120c <Lexi_DO_PWM_LUM_DRIVER+0x24c>
			if (lexilight.duty <= 20){
 800115a:	4b33      	ldr	r3, [pc, #204]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b14      	cmp	r3, #20
 8001160:	d80f      	bhi.n	8001182 <Lexi_DO_PWM_LUM_DRIVER+0x1c2>
				lux_cmd =  1200 + (2800 - 1200)*(lexilight.duty - 10)/10;
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
 8001172:	4a2e      	ldr	r2, [pc, #184]	; (800122c <Lexi_DO_PWM_LUM_DRIVER+0x26c>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	08db      	lsrs	r3, r3, #3
 800117a:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e002      	b.n	8001188 <Lexi_DO_PWM_LUM_DRIVER+0x1c8>
				lux_cmd =  2800;
 8001182:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8001186:	60fb      	str	r3, [r7, #12]
			if (lexilight.state  == LIGHT_STATE_STANDARD){
 8001188:	4b27      	ldr	r3, [pc, #156]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 800118a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800118e:	2b04      	cmp	r3, #4
 8001190:	d11c      	bne.n	80011cc <Lexi_DO_PWM_LUM_DRIVER+0x20c>
				value_2 = (unsigned int)(lux_cmd / 100) ;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <Lexi_DO_PWM_LUM_DRIVER+0x270>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	607b      	str	r3, [r7, #4]
				value  = (unsigned int)((140 - value_2)*0.77);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f1c3 038c 	rsb	r3, r3, #140	; 0x8c
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f965 	bl	8000474 <__aeabi_ui2d>
 80011aa:	a31d      	add	r3, pc, #116	; (adr r3, 8001220 <Lexi_DO_PWM_LUM_DRIVER+0x260>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff f9da 	bl	8000568 <__aeabi_dmul>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fbe6 	bl	800098c <__aeabi_d2uiz>
 80011c0:	4603      	mov	r3, r0
 80011c2:	60bb      	str	r3, [r7, #8]
				lexilight.pwm_led_driver = value;
 80011c4:	4a18      	ldr	r2, [pc, #96]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	e01b      	b.n	8001204 <Lexi_DO_PWM_LUM_DRIVER+0x244>
				value_2 = (unsigned int)(lux_cmd / lexilight.duty) ;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	607b      	str	r3, [r7, #4]
				value  = (unsigned int)((140 - value_2)*0.77);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f1c3 038c 	rsb	r3, r3, #140	; 0x8c
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f948 	bl	8000474 <__aeabi_ui2d>
 80011e4:	a30e      	add	r3, pc, #56	; (adr r3, 8001220 <Lexi_DO_PWM_LUM_DRIVER+0x260>)
 80011e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ea:	f7ff f9bd 	bl	8000568 <__aeabi_dmul>
 80011ee:	4603      	mov	r3, r0
 80011f0:	460c      	mov	r4, r1
 80011f2:	4618      	mov	r0, r3
 80011f4:	4621      	mov	r1, r4
 80011f6:	f7ff fbc9 	bl	800098c <__aeabi_d2uiz>
 80011fa:	4603      	mov	r3, r0
 80011fc:	60bb      	str	r3, [r7, #8]
				lexilight.pwm_led_driver = value;
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <Lexi_DO_PWM_LUM_DRIVER+0x268>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	6453      	str	r3, [r2, #68]	; 0x44
			__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_1, value);
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800120a:	bf00      	nop
	}
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001216:	b004      	add	sp, #16
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	f3af 8000 	nop.w
 8001220:	0a3d70a4 	.word	0x0a3d70a4
 8001224:	3fe8a3d7 	.word	0x3fe8a3d7
 8001228:	20000028 	.word	0x20000028
 800122c:	cccccccd 	.word	0xcccccccd
 8001230:	51eb851f 	.word	0x51eb851f

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	b09d      	sub	sp, #116	; 0x74
 8001238:	af1c      	add	r7, sp, #112	; 0x70
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123a:	f001 f923 	bl	8002484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123e:	f000 f85b 	bl	80012f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001242:	f000 fbe7 	bl	8001a14 <MX_GPIO_Init>
  MX_DAC_Init();
 8001246:	f000 f8f3 	bl	8001430 <MX_DAC_Init>
  MX_LTDC_Init();
 800124a:	f000 f94d 	bl	80014e8 <MX_LTDC_Init>
  MX_UART7_Init();
 800124e:	f000 fbb7 	bl	80019c0 <MX_UART7_Init>
  MX_CRC_Init();
 8001252:	f000 f8d9 	bl	8001408 <MX_CRC_Init>
  MX_SPI3_Init();
 8001256:	f000 f9f9 	bl	800164c <MX_SPI3_Init>
  MX_UART4_Init();
 800125a:	f000 fb87 	bl	800196c <MX_UART4_Init>
  MX_TIM1_Init();
 800125e:	f000 fa2d 	bl	80016bc <MX_TIM1_Init>
  MX_DMA2D_Init();
 8001262:	f000 f90f 	bl	8001484 <MX_DMA2D_Init>
  MX_TIM2_Init();
 8001266:	f000 fa79 	bl	800175c <MX_TIM2_Init>
  MX_TIM3_Init();
 800126a:	f000 facf 	bl	800180c <MX_TIM3_Init>
  MX_TIM4_Init();
 800126e:	f000 fb25 	bl	80018bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	Lexi_Init_Data();								//Init Data LexiLight
 8001272:	f7ff fd2b 	bl	8000ccc <Lexi_Init_Data>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);		//Start PWM TIM2 Channel 2 -- LED LAMPE
 8001276:	2100      	movs	r1, #0
 8001278:	481b      	ldr	r0, [pc, #108]	; (80012e8 <main+0xb4>)
 800127a:	f002 ff25 	bl	80040c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		//Start PWM TIM3 Channel 1 -- LED DRIVER
 800127e:	2100      	movs	r1, #0
 8001280:	481a      	ldr	r0, [pc, #104]	; (80012ec <main+0xb8>)
 8001282:	f002 ff21 	bl	80040c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);		//Start PWM TIM4 Channel 1 -- LED BACKLIGHT
 8001286:	210c      	movs	r1, #12
 8001288:	4819      	ldr	r0, [pc, #100]	; (80012f0 <main+0xbc>)
 800128a:	f002 ff1d 	bl	80040c8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim1);						//Start TIM1
 800128e:	4819      	ldr	r0, [pc, #100]	; (80012f4 <main+0xc0>)
 8001290:	f002 fecb 	bl	800402a <HAL_TIM_Base_Start>

	__HAL_TIM_SET_COMPARE(&htim2 , TIM_CHANNEL_1,0);	//Set Duty = 0
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <main+0xb4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2200      	movs	r2, #0
 800129a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_1,0);	//Set Duty = 0
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <main+0xb8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2200      	movs	r2, #0
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4 , TIM_CHANNEL_4,0);	//Set Duty = 0
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <main+0xbc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Lexi_Task (htim2, htim3);
 80012ac:	4e0e      	ldr	r6, [pc, #56]	; (80012e8 <main+0xb4>)
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <main+0xb8>)
 80012b0:	ac0c      	add	r4, sp, #48	; 0x30
 80012b2:	461d      	mov	r5, r3
 80012b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012c8:	466d      	mov	r5, sp
 80012ca:	f106 0410 	add.w	r4, r6, #16
 80012ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80012de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012e2:	f7ff fd21 	bl	8000d28 <Lexi_Task>
 80012e6:	e7e1      	b.n	80012ac <main+0x78>
 80012e8:	2000037c 	.word	0x2000037c
 80012ec:	200000fc 	.word	0x200000fc
 80012f0:	200000b4 	.word	0x200000b4
 80012f4:	200002bc 	.word	0x200002bc

080012f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0a0      	sub	sp, #128	; 0x80
 80012fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001302:	2230      	movs	r2, #48	; 0x30
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f004 f814 	bl	8005334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2230      	movs	r2, #48	; 0x30
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f004 f805 	bl	8005334 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 800132a:	4b35      	ldr	r3, [pc, #212]	; (8001400 <SystemClock_Config+0x108>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001332:	4a33      	ldr	r2, [pc, #204]	; (8001400 <SystemClock_Config+0x108>)
 8001334:	f043 0310 	orr.w	r3, r3, #16
 8001338:	6053      	str	r3, [r2, #4]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800133a:	4b31      	ldr	r3, [pc, #196]	; (8001400 <SystemClock_Config+0x108>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4a30      	ldr	r2, [pc, #192]	; (8001400 <SystemClock_Config+0x108>)
 8001340:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001344:	6053      	str	r3, [r2, #4]
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <SystemClock_Config+0x108>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a2c      	ldr	r2, [pc, #176]	; (8001400 <SystemClock_Config+0x108>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <SystemClock_Config+0x108>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b27      	ldr	r3, [pc, #156]	; (8001404 <SystemClock_Config+0x10c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800136e:	4a25      	ldr	r2, [pc, #148]	; (8001404 <SystemClock_Config+0x10c>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <SystemClock_Config+0x10c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001382:	2302      	movs	r3, #2
 8001384:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001386:	2301      	movs	r3, #1
 8001388:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138a:	2310      	movs	r3, #16
 800138c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800138e:	2300      	movs	r3, #0
 8001390:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001392:	2300      	movs	r3, #0
 8001394:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001396:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800139a:	4618      	mov	r0, r3
 800139c:	f001 ffbc 	bl	8003318 <HAL_RCC_OscConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80013a6:	f000 fcad 	bl	8001d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013aa:	230f      	movs	r3, #15
 80013ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013ae:	2300      	movs	r3, #0
 80013b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 fa17 	bl	80037f8 <HAL_RCC_ClockConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80013d0:	f000 fc98 	bl	8001d04 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013d4:	2308      	movs	r3, #8
 80013d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 80013d8:	2364      	movs	r3, #100	; 0x64
 80013da:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80013dc:	2302      	movs	r3, #2
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80013e0:	2300      	movs	r3, #0
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 fbd1 	bl	8003b90 <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80013f4:	f000 fc86 	bl	8001d04 <Error_Handler>
  }
}
 80013f8:	bf00      	nop
 80013fa:	3780      	adds	r7, #128	; 0x80
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40007000 	.word	0x40007000

08001408 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_CRC_Init+0x20>)
 800140e:	4a07      	ldr	r2, [pc, #28]	; (800142c <MX_CRC_Init+0x24>)
 8001410:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_CRC_Init+0x20>)
 8001414:	f001 f9af 	bl	8002776 <HAL_CRC_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800141e:	f000 fc71 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200000f4 	.word	0x200000f4
 800142c:	40023000 	.word	0x40023000

08001430 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001436:	463b      	mov	r3, r7
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_DAC_Init+0x4c>)
 8001440:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <MX_DAC_Init+0x50>)
 8001442:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001444:	480d      	ldr	r0, [pc, #52]	; (800147c <MX_DAC_Init+0x4c>)
 8001446:	f001 f9b2 	bl	80027ae <HAL_DAC_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001450:	f000 fc58 	bl	8001d04 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001454:	2300      	movs	r3, #0
 8001456:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	2210      	movs	r2, #16
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <MX_DAC_Init+0x4c>)
 8001464:	f001 f9c5 	bl	80027f2 <HAL_DAC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800146e:	f000 fc49 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000023c 	.word	0x2000023c
 8001480:	40007400 	.word	0x40007400

08001484 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_DMA2D_Init+0x5c>)
 800148a:	4a16      	ldr	r2, [pc, #88]	; (80014e4 <MX_DMA2D_Init+0x60>)
 800148c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <MX_DMA2D_Init+0x5c>)
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <MX_DMA2D_Init+0x5c>)
 8001496:	2202      	movs	r2, #2
 8001498:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_DMA2D_Init+0x5c>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_DMA2D_Init+0x5c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <MX_DMA2D_Init+0x5c>)
 80014a8:	2202      	movs	r2, #2
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_DMA2D_Init+0x5c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MX_DMA2D_Init+0x5c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80014b8:	4809      	ldr	r0, [pc, #36]	; (80014e0 <MX_DMA2D_Init+0x5c>)
 80014ba:	f001 f9e7 	bl	800288c <HAL_DMA2D_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80014c4:	f000 fc1e 	bl	8001d04 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80014c8:	2101      	movs	r1, #1
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_DMA2D_Init+0x5c>)
 80014cc:	f001 fa28 	bl	8002920 <HAL_DMA2D_ConfigLayer>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80014d6:	f000 fc15 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000033c 	.word	0x2000033c
 80014e4:	4002b000 	.word	0x4002b000

080014e8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b09a      	sub	sp, #104	; 0x68
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014f2:	2234      	movs	r2, #52	; 0x34
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 ff1c 	bl	8005334 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2234      	movs	r2, #52	; 0x34
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f003 ff16 	bl	8005334 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001508:	4b4e      	ldr	r3, [pc, #312]	; (8001644 <MX_LTDC_Init+0x15c>)
 800150a:	4a4f      	ldr	r2, [pc, #316]	; (8001648 <MX_LTDC_Init+0x160>)
 800150c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800150e:	4b4d      	ldr	r3, [pc, #308]	; (8001644 <MX_LTDC_Init+0x15c>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001514:	4b4b      	ldr	r3, [pc, #300]	; (8001644 <MX_LTDC_Init+0x15c>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <MX_LTDC_Init+0x15c>)
 800151c:	2200      	movs	r2, #0
 800151e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001520:	4b48      	ldr	r3, [pc, #288]	; (8001644 <MX_LTDC_Init+0x15c>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <MX_LTDC_Init+0x15c>)
 8001528:	2207      	movs	r2, #7
 800152a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800152c:	4b45      	ldr	r3, [pc, #276]	; (8001644 <MX_LTDC_Init+0x15c>)
 800152e:	2203      	movs	r2, #3
 8001530:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001532:	4b44      	ldr	r3, [pc, #272]	; (8001644 <MX_LTDC_Init+0x15c>)
 8001534:	220e      	movs	r2, #14
 8001536:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001538:	4b42      	ldr	r3, [pc, #264]	; (8001644 <MX_LTDC_Init+0x15c>)
 800153a:	2205      	movs	r2, #5
 800153c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <MX_LTDC_Init+0x15c>)
 8001540:	22fe      	movs	r2, #254	; 0xfe
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 8001544:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <MX_LTDC_Init+0x15c>)
 8001546:	f240 1245 	movw	r2, #325	; 0x145
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 260;
 800154c:	4b3d      	ldr	r3, [pc, #244]	; (8001644 <MX_LTDC_Init+0x15c>)
 800154e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001554:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <MX_LTDC_Init+0x15c>)
 8001556:	f240 1247 	movw	r2, #327	; 0x147
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800155c:	4b39      	ldr	r3, [pc, #228]	; (8001644 <MX_LTDC_Init+0x15c>)
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001564:	4b37      	ldr	r3, [pc, #220]	; (8001644 <MX_LTDC_Init+0x15c>)
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800156c:	4b35      	ldr	r3, [pc, #212]	; (8001644 <MX_LTDC_Init+0x15c>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001574:	4833      	ldr	r0, [pc, #204]	; (8001644 <MX_LTDC_Init+0x15c>)
 8001576:	f001 fc29 	bl	8002dcc <HAL_LTDC_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 8001580:	f000 fbc0 	bl	8001d04 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001594:	2302      	movs	r3, #2
 8001596:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80015a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a4:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015a6:	2305      	movs	r3, #5
 80015a8:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	481c      	ldr	r0, [pc, #112]	; (8001644 <MX_LTDC_Init+0x15c>)
 80015d2:	f001 fccb 	bl	8002f6c <HAL_LTDC_ConfigLayer>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80015dc:	f000 fb92 	bl	8001d04 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80015f0:	2302      	movs	r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80015fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001600:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001602:	2305      	movs	r3, #5
 8001604:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	2201      	movs	r2, #1
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <MX_LTDC_Init+0x15c>)
 800162c:	f001 fc9e 	bl	8002f6c <HAL_LTDC_ConfigLayer>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_LTDC_Init+0x152>
  {
    Error_Handler();
 8001636:	f000 fb65 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	3768      	adds	r7, #104	; 0x68
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000194 	.word	0x20000194
 8001648:	40016800 	.word	0x40016800

0800164c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <MX_SPI3_Init+0x68>)
 8001652:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <MX_SPI3_Init+0x6c>)
 8001654:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <MX_SPI3_Init+0x68>)
 8001658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800165c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <MX_SPI3_Init+0x68>)
 8001660:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001664:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <MX_SPI3_Init+0x68>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_SPI3_Init+0x68>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <MX_SPI3_Init+0x68>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_SPI3_Init+0x68>)
 800167a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_SPI3_Init+0x68>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <MX_SPI3_Init+0x68>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_SPI3_Init+0x68>)
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <MX_SPI3_Init+0x68>)
 8001694:	2200      	movs	r2, #0
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_SPI3_Init+0x68>)
 800169a:	220a      	movs	r2, #10
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_SPI3_Init+0x68>)
 80016a0:	f002 fc34 	bl	8003f0c <HAL_SPI_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80016aa:	f000 fb2b 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000013c 	.word	0x2000013c
 80016b8:	40003c00 	.word	0x40003c00

080016bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <MX_TIM1_Init+0x98>)
 80016da:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <MX_TIM1_Init+0x9c>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <MX_TIM1_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <MX_TIM1_Init+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <MX_TIM1_Init+0x98>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <MX_TIM1_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <MX_TIM1_Init+0x98>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <MX_TIM1_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001702:	4814      	ldr	r0, [pc, #80]	; (8001754 <MX_TIM1_Init+0x98>)
 8001704:	f002 fc66 	bl	8003fd4 <HAL_TIM_Base_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800170e:	f000 faf9 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	4619      	mov	r1, r3
 800171e:	480d      	ldr	r0, [pc, #52]	; (8001754 <MX_TIM1_Init+0x98>)
 8001720:	f002 fdd6 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800172a:	f000 faeb 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	4619      	mov	r1, r3
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <MX_TIM1_Init+0x98>)
 800173c:	f003 f990 	bl	8004a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001746:	f000 fadd 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200002bc 	.word	0x200002bc
 8001758:	40010000 	.word	0x40010000

0800175c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <MX_TIM2_Init+0xac>)
 8001780:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001784:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <MX_TIM2_Init+0xac>)
 8001788:	2277      	movs	r2, #119	; 0x77
 800178a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <MX_TIM2_Init+0xac>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <MX_TIM2_Init+0xac>)
 8001794:	2264      	movs	r2, #100	; 0x64
 8001796:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <MX_TIM2_Init+0xac>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_TIM2_Init+0xac>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017a4:	4818      	ldr	r0, [pc, #96]	; (8001808 <MX_TIM2_Init+0xac>)
 80017a6:	f002 fc64 	bl	8004072 <HAL_TIM_PWM_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80017b0:	f000 faa8 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4619      	mov	r1, r3
 80017c2:	4811      	ldr	r0, [pc, #68]	; (8001808 <MX_TIM2_Init+0xac>)
 80017c4:	f003 f94c 	bl	8004a60 <HAL_TIMEx_MasterConfigSynchronization>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80017ce:	f000 fa99 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d2:	2360      	movs	r3, #96	; 0x60
 80017d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2200      	movs	r2, #0
 80017e6:	4619      	mov	r1, r3
 80017e8:	4807      	ldr	r0, [pc, #28]	; (8001808 <MX_TIM2_Init+0xac>)
 80017ea:	f002 fcab 	bl	8004144 <HAL_TIM_PWM_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80017f4:	f000 fa86 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017f8:	4803      	ldr	r0, [pc, #12]	; (8001808 <MX_TIM2_Init+0xac>)
 80017fa:	f000 fccd 	bl	8002198 <HAL_TIM_MspPostInit>

}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000037c 	.word	0x2000037c

0800180c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001812:	f107 0320 	add.w	r3, r7, #32
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]
 800182a:	615a      	str	r2, [r3, #20]
 800182c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800182e:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <MX_TIM3_Init+0xa8>)
 8001830:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <MX_TIM3_Init+0xac>)
 8001832:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119;
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <MX_TIM3_Init+0xa8>)
 8001836:	2277      	movs	r2, #119	; 0x77
 8001838:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <MX_TIM3_Init+0xa8>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <MX_TIM3_Init+0xa8>)
 8001842:	2264      	movs	r2, #100	; 0x64
 8001844:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <MX_TIM3_Init+0xa8>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_TIM3_Init+0xa8>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001852:	4818      	ldr	r0, [pc, #96]	; (80018b4 <MX_TIM3_Init+0xa8>)
 8001854:	f002 fc0d 	bl	8004072 <HAL_TIM_PWM_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800185e:	f000 fa51 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	4619      	mov	r1, r3
 8001870:	4810      	ldr	r0, [pc, #64]	; (80018b4 <MX_TIM3_Init+0xa8>)
 8001872:	f003 f8f5 	bl	8004a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800187c:	f000 fa42 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001880:	2360      	movs	r3, #96	; 0x60
 8001882:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2208      	movs	r2, #8
 8001894:	4619      	mov	r1, r3
 8001896:	4807      	ldr	r0, [pc, #28]	; (80018b4 <MX_TIM3_Init+0xa8>)
 8001898:	f002 fc54 	bl	8004144 <HAL_TIM_PWM_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80018a2:	f000 fa2f 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018a6:	4803      	ldr	r0, [pc, #12]	; (80018b4 <MX_TIM3_Init+0xa8>)
 80018a8:	f000 fc76 	bl	8002198 <HAL_TIM_MspPostInit>

}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200000fc 	.word	0x200000fc
 80018b8:	40000400 	.word	0x40000400

080018bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c2:	f107 0320 	add.w	r3, r7, #32
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	611a      	str	r2, [r3, #16]
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018de:	4b21      	ldr	r3, [pc, #132]	; (8001964 <MX_TIM4_Init+0xa8>)
 80018e0:	4a21      	ldr	r2, [pc, #132]	; (8001968 <MX_TIM4_Init+0xac>)
 80018e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 119;
 80018e4:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <MX_TIM4_Init+0xa8>)
 80018e6:	2277      	movs	r2, #119	; 0x77
 80018e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <MX_TIM4_Init+0xa8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <MX_TIM4_Init+0xa8>)
 80018f2:	2264      	movs	r2, #100	; 0x64
 80018f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <MX_TIM4_Init+0xa8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_TIM4_Init+0xa8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001902:	4818      	ldr	r0, [pc, #96]	; (8001964 <MX_TIM4_Init+0xa8>)
 8001904:	f002 fbb5 	bl	8004072 <HAL_TIM_PWM_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800190e:	f000 f9f9 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800191a:	f107 0320 	add.w	r3, r7, #32
 800191e:	4619      	mov	r1, r3
 8001920:	4810      	ldr	r0, [pc, #64]	; (8001964 <MX_TIM4_Init+0xa8>)
 8001922:	f003 f89d 	bl	8004a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800192c:	f000 f9ea 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001930:	2360      	movs	r3, #96	; 0x60
 8001932:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	220c      	movs	r2, #12
 8001944:	4619      	mov	r1, r3
 8001946:	4807      	ldr	r0, [pc, #28]	; (8001964 <MX_TIM4_Init+0xa8>)
 8001948:	f002 fbfc 	bl	8004144 <HAL_TIM_PWM_ConfigChannel>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001952:	f000 f9d7 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <MX_TIM4_Init+0xa8>)
 8001958:	f000 fc1e 	bl	8002198 <HAL_TIM_MspPostInit>

}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200000b4 	.word	0x200000b4
 8001968:	40000800 	.word	0x40000800

0800196c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_UART4_Init+0x4c>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <MX_UART4_Init+0x50>)
 8001974:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <MX_UART4_Init+0x4c>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_UART4_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_UART4_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_UART4_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_UART4_Init+0x4c>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MX_UART4_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_UART4_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_UART4_Init+0x4c>)
 80019a4:	f003 f8d8 	bl	8004b58 <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80019ae:	f000 f9a9 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200002fc 	.word	0x200002fc
 80019bc:	40004c00 	.word	0x40004c00

080019c0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_UART7_Init+0x4c>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <MX_UART7_Init+0x50>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <MX_UART7_Init+0x4c>)
 80019cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <MX_UART7_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_UART7_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <MX_UART7_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <MX_UART7_Init+0x4c>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <MX_UART7_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <MX_UART7_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_UART7_Init+0x4c>)
 80019f8:	f003 f8ae 	bl	8004b58 <HAL_UART_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001a02:	f000 f97f 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000074 	.word	0x20000074
 8001a10:	40007800 	.word	0x40007800

08001a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	; 0x30
 8001a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	4bae      	ldr	r3, [pc, #696]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4aad      	ldr	r2, [pc, #692]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001a34:	f043 0310 	orr.w	r3, r3, #16
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4bab      	ldr	r3, [pc, #684]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	4ba7      	ldr	r3, [pc, #668]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4aa6      	ldr	r2, [pc, #664]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4ba4      	ldr	r3, [pc, #656]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4ba0      	ldr	r3, [pc, #640]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a9f      	ldr	r2, [pc, #636]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b9d      	ldr	r3, [pc, #628]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b99      	ldr	r3, [pc, #612]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a98      	ldr	r2, [pc, #608]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b96      	ldr	r3, [pc, #600]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	4b92      	ldr	r3, [pc, #584]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a91      	ldr	r2, [pc, #580]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b8f      	ldr	r3, [pc, #572]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b8b      	ldr	r3, [pc, #556]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a8a      	ldr	r2, [pc, #552]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <MX_GPIO_Init+0x2d4>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CMD_LED2_Pin|CMD_LED3_Pin|CMD_LED4_Pin|CMD_LED5_Pin 
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	217e      	movs	r1, #126	; 0x7e
 8001ad6:	4885      	ldr	r0, [pc, #532]	; (8001cec <MX_GPIO_Init+0x2d8>)
 8001ad8:	f001 f95e 	bl	8002d98 <HAL_GPIO_WritePin>
                          |CMD_LED6_Pin|CMD_LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_OTG_Pin|SHDN_CONTROL_Pin|ALIM_CLE_USB_Pin, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	f648 0110 	movw	r1, #34832	; 0x8810
 8001ae2:	4883      	ldr	r0, [pc, #524]	; (8001cf0 <MX_GPIO_Init+0x2dc>)
 8001ae4:	f001 f958 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2104      	movs	r1, #4
 8001aec:	4881      	ldr	r0, [pc, #516]	; (8001cf4 <MX_GPIO_Init+0x2e0>)
 8001aee:	f001 f953 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TP_RESET_Pin|EN_DRIVER_Pin|CS_LCD_Pin|CMD_ALIM_LCD_Pin 
 8001af2:	2200      	movs	r2, #0
 8001af4:	f242 21c3 	movw	r1, #8899	; 0x22c3
 8001af8:	487f      	ldr	r0, [pc, #508]	; (8001cf8 <MX_GPIO_Init+0x2e4>)
 8001afa:	f001 f94d 	bl	8002d98 <HAL_GPIO_WritePin>
                          |CMD_ALIM_BLE_Pin|CS_FLASH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CMD_WP_MEM_GPIO_Port, CMD_WP_MEM_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2120      	movs	r1, #32
 8001b02:	487e      	ldr	r0, [pc, #504]	; (8001cfc <MX_GPIO_Init+0x2e8>)
 8001b04:	f001 f948 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CMD_LED2_Pin CMD_LED3_Pin CMD_LED4_Pin CMD_LED5_Pin 
                           CMD_LED6_Pin CMD_LED1_Pin */
  GPIO_InitStruct.Pin = CMD_LED2_Pin|CMD_LED3_Pin|CMD_LED4_Pin|CMD_LED5_Pin 
 8001b08:	237e      	movs	r3, #126	; 0x7e
 8001b0a:	61fb      	str	r3, [r7, #28]
                          |CMD_LED6_Pin|CMD_LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4873      	ldr	r0, [pc, #460]	; (8001cec <MX_GPIO_Init+0x2d8>)
 8001b20:	f000 ff90 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHRG_OK_Pin CMPOUT_Pin */
  GPIO_InitStruct.Pin = CHRG_OK_Pin|CMPOUT_Pin;
 8001b24:	f242 0302 	movw	r3, #8194	; 0x2002
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b2a:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <MX_GPIO_Init+0x2ec>)
 8001b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	486d      	ldr	r0, [pc, #436]	; (8001cf0 <MX_GPIO_Init+0x2dc>)
 8001b3a:	f000 ff83 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROCHOT_Pin */
  GPIO_InitStruct.Pin = PROCHOT_Pin;
 8001b3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PROCHOT_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	4867      	ldr	r0, [pc, #412]	; (8001cf0 <MX_GPIO_Init+0x2dc>)
 8001b54:	f000 ff76 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_OTG_Pin SHDN_CONTROL_Pin ALIM_CLE_USB_Pin */
  GPIO_InitStruct.Pin = EN_OTG_Pin|SHDN_CONTROL_Pin|ALIM_CLE_USB_Pin;
 8001b58:	f648 0310 	movw	r3, #34832	; 0x8810
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	485f      	ldr	r0, [pc, #380]	; (8001cf0 <MX_GPIO_Init+0x2dc>)
 8001b72:	f000 ff67 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001b76:	2304      	movs	r3, #4
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4859      	ldr	r0, [pc, #356]	; (8001cf4 <MX_GPIO_Init+0x2e0>)
 8001b8e:	f000 ff59 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4851      	ldr	r0, [pc, #324]	; (8001cf4 <MX_GPIO_Init+0x2e0>)
 8001bae:	f000 ff49 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001bb2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	4619      	mov	r1, r3
 8001bce:	484b      	ldr	r0, [pc, #300]	; (8001cfc <MX_GPIO_Init+0x2e8>)
 8001bd0:	f000 ff38 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_RESET_Pin EN_DRIVER_Pin CS_LCD_Pin CMD_ALIM_LCD_Pin 
                           CMD_ALIM_BLE_Pin CS_FLASH_Pin */
  GPIO_InitStruct.Pin = TP_RESET_Pin|EN_DRIVER_Pin|CS_LCD_Pin|CMD_ALIM_LCD_Pin 
 8001bd4:	f242 23c3 	movw	r3, #8899	; 0x22c3
 8001bd8:	61fb      	str	r3, [r7, #28]
                          |CMD_ALIM_BLE_Pin|CS_FLASH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	4619      	mov	r1, r3
 8001bec:	4842      	ldr	r0, [pc, #264]	; (8001cf8 <MX_GPIO_Init+0x2e4>)
 8001bee:	f000 ff29 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_INT_Pin FLT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin|FLT_Pin;
 8001bf2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bf8:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <MX_GPIO_Init+0x2ec>)
 8001bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	483c      	ldr	r0, [pc, #240]	; (8001cf8 <MX_GPIO_Init+0x2e4>)
 8001c08:	f000 ff1c 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CMD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = CMD_ON_OFF_Pin;
 8001c0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CMD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4835      	ldr	r0, [pc, #212]	; (8001cf8 <MX_GPIO_Init+0x2e4>)
 8001c22:	f000 ff0f 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2c:	2312      	movs	r3, #18
 8001c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c30:	2301      	movs	r3, #1
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	482b      	ldr	r0, [pc, #172]	; (8001cf0 <MX_GPIO_Init+0x2dc>)
 8001c44:	f000 fefe 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4e:	2312      	movs	r3, #18
 8001c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4823      	ldr	r0, [pc, #140]	; (8001cf4 <MX_GPIO_Init+0x2e0>)
 8001c66:	f000 feed 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : POWER_OK3_Pin POWER_OK2_Pin */
  GPIO_InitStruct.Pin = POWER_OK3_Pin|POWER_OK2_Pin;
 8001c6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c70:	2300      	movs	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	481d      	ldr	r0, [pc, #116]	; (8001cf4 <MX_GPIO_Init+0x2e0>)
 8001c80:	f000 fee0 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001c84:	2318      	movs	r3, #24
 8001c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c94:	2305      	movs	r3, #5
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4817      	ldr	r0, [pc, #92]	; (8001cfc <MX_GPIO_Init+0x2e8>)
 8001ca0:	f000 fed0 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CMD_WP_MEM_Pin */
  GPIO_InitStruct.Pin = CMD_WP_MEM_Pin;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CMD_WP_MEM_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4810      	ldr	r0, [pc, #64]	; (8001cfc <MX_GPIO_Init+0x2e8>)
 8001cbc:	f000 fec2 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cc0:	23c0      	movs	r3, #192	; 0xc0
 8001cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc4:	2312      	movs	r3, #18
 8001cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4808      	ldr	r0, [pc, #32]	; (8001cfc <MX_GPIO_Init+0x2e8>)
 8001cdc:	f000 feb2 	bl	8002a44 <HAL_GPIO_Init>

}
 8001ce0:	bf00      	nop
 8001ce2:	3730      	adds	r7, #48	; 0x30
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	10110000 	.word	0x10110000

08001d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_MspInit+0x4c>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	4a0f      	ldr	r2, [pc, #60]	; (8001d60 <HAL_MspInit+0x4c>)
 8001d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d28:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HAL_MspInit+0x4c>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_MspInit+0x4c>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <HAL_MspInit+0x4c>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_MspInit+0x4c>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800

08001d64 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <HAL_CRC_MspInit+0x3c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d10d      	bne.n	8001d92 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_CRC_MspInit+0x40>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_CRC_MspInit+0x40>)
 8001d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_CRC_MspInit+0x40>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023000 	.word	0x40023000
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_DAC_MspInit+0x7c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d127      	bne.n	8001e1a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_DAC_MspInit+0x80>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <HAL_DAC_MspInit+0x80>)
 8001dd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_DAC_MspInit+0x80>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_DAC_MspInit+0x80>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <HAL_DAC_MspInit+0x80>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_DAC_MspInit+0x80>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e02:	2320      	movs	r3, #32
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e06:	2303      	movs	r3, #3
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <HAL_DAC_MspInit+0x84>)
 8001e16:	f000 fe15 	bl	8002a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	; 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40007400 	.word	0x40007400
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020000 	.word	0x40020000

08001e30 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <HAL_DMA2D_MspInit+0x3c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d10d      	bne.n	8001e5e <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_DMA2D_MspInit+0x40>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_DMA2D_MspInit+0x40>)
 8001e4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_DMA2D_MspInit+0x40>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	4002b000 	.word	0x4002b000
 8001e70:	40023800 	.word	0x40023800

08001e74 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	; 0x38
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a5f      	ldr	r2, [pc, #380]	; (8002010 <HAL_LTDC_MspInit+0x19c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	f040 80b8 	bne.w	8002008 <HAL_LTDC_MspInit+0x194>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
 8001e9c:	4b5d      	ldr	r3, [pc, #372]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	4a5c      	ldr	r2, [pc, #368]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001ea2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ea6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea8:	4b5a      	ldr	r3, [pc, #360]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eb0:	623b      	str	r3, [r7, #32]
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	4b56      	ldr	r3, [pc, #344]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	4a55      	ldr	r2, [pc, #340]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	4a4e      	ldr	r2, [pc, #312]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001eda:	f043 0302 	orr.w	r3, r3, #2
 8001ede:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	4b48      	ldr	r3, [pc, #288]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	4a47      	ldr	r2, [pc, #284]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001ef6:	f043 0310 	orr.w	r3, r3, #16
 8001efa:	6313      	str	r3, [r2, #48]	; 0x30
 8001efc:	4b45      	ldr	r3, [pc, #276]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	4b41      	ldr	r3, [pc, #260]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	4a40      	ldr	r2, [pc, #256]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001f12:	f043 0308 	orr.w	r3, r3, #8
 8001f16:	6313      	str	r3, [r2, #48]	; 0x30
 8001f18:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	4a39      	ldr	r2, [pc, #228]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6313      	str	r3, [r2, #48]	; 0x30
 8001f34:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_LTDC_MspInit+0x1a0>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> LTDC_R5
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8001f40:	f641 0358 	movw	r3, #6232	; 0x1858
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f52:	230e      	movs	r3, #14
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	482e      	ldr	r0, [pc, #184]	; (8002018 <HAL_LTDC_MspInit+0x1a4>)
 8001f5e:	f000 fd71 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f62:	2303      	movs	r3, #3
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f72:	2309      	movs	r3, #9
 8001f74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4827      	ldr	r0, [pc, #156]	; (800201c <HAL_LTDC_MspInit+0x1a8>)
 8001f7e:	f000 fd61 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8001f82:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f94:	230e      	movs	r3, #14
 8001f96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4820      	ldr	r0, [pc, #128]	; (8002020 <HAL_LTDC_MspInit+0x1ac>)
 8001fa0:	f000 fd50 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001fa4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fb6:	230e      	movs	r3, #14
 8001fb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4816      	ldr	r0, [pc, #88]	; (800201c <HAL_LTDC_MspInit+0x1a8>)
 8001fc2:	f000 fd3f 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001fc6:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fd8:	230e      	movs	r3, #14
 8001fda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4810      	ldr	r0, [pc, #64]	; (8002024 <HAL_LTDC_MspInit+0x1b0>)
 8001fe4:	f000 fd2e 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fe8:	23c0      	movs	r3, #192	; 0xc0
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ff8:	230e      	movs	r3, #14
 8001ffa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002000:	4619      	mov	r1, r3
 8002002:	4809      	ldr	r0, [pc, #36]	; (8002028 <HAL_LTDC_MspInit+0x1b4>)
 8002004:	f000 fd1e 	bl	8002a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002008:	bf00      	nop
 800200a:	3738      	adds	r7, #56	; 0x38
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40016800 	.word	0x40016800
 8002014:	40023800 	.word	0x40023800
 8002018:	40020000 	.word	0x40020000
 800201c:	40020400 	.word	0x40020400
 8002020:	40021000 	.word	0x40021000
 8002024:	40020c00 	.word	0x40020c00
 8002028:	40020800 	.word	0x40020800

0800202c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_SPI_MspInit+0x84>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d12c      	bne.n	80020a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002086:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800208a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002098:	2306      	movs	r3, #6
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <HAL_SPI_MspInit+0x8c>)
 80020a4:	f000 fcce 	bl	8002a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020a8:	bf00      	nop
 80020aa:	3728      	adds	r7, #40	; 0x28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40003c00 	.word	0x40003c00
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020800 	.word	0x40020800

080020bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <HAL_TIM_Base_MspInit+0x3c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d10d      	bne.n	80020ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_TIM_Base_MspInit+0x40>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <HAL_TIM_Base_MspInit+0x40>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_TIM_Base_MspInit+0x40>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40023800 	.word	0x40023800

08002100 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002110:	d10e      	bne.n	8002130 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_TIM_PWM_MspInit+0x8c>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a1c      	ldr	r2, [pc, #112]	; (800218c <HAL_TIM_PWM_MspInit+0x8c>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_TIM_PWM_MspInit+0x8c>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800212e:	e026      	b.n	800217e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a16      	ldr	r2, [pc, #88]	; (8002190 <HAL_TIM_PWM_MspInit+0x90>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10e      	bne.n	8002158 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_TIM_PWM_MspInit+0x8c>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <HAL_TIM_PWM_MspInit+0x8c>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_TIM_PWM_MspInit+0x8c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
}
 8002156:	e012      	b.n	800217e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <HAL_TIM_PWM_MspInit+0x94>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d10d      	bne.n	800217e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_TIM_PWM_MspInit+0x8c>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a08      	ldr	r2, [pc, #32]	; (800218c <HAL_TIM_PWM_MspInit+0x8c>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_TIM_PWM_MspInit+0x8c>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
}
 800217e:	bf00      	nop
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40000400 	.word	0x40000400
 8002194:	40000800 	.word	0x40000800

08002198 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b8:	d11f      	bne.n	80021fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b35      	ldr	r3, [pc, #212]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a34      	ldr	r2, [pc, #208]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b32      	ldr	r3, [pc, #200]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021e8:	2301      	movs	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	4829      	ldr	r0, [pc, #164]	; (8002298 <HAL_TIM_MspPostInit+0x100>)
 80021f4:	f000 fc26 	bl	8002a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021f8:	e048      	b.n	800228c <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a27      	ldr	r2, [pc, #156]	; (800229c <HAL_TIM_MspPostInit+0x104>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d11f      	bne.n	8002244 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	4b22      	ldr	r3, [pc, #136]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	4a21      	ldr	r2, [pc, #132]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	6313      	str	r3, [r2, #48]	; 0x30
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002232:	2302      	movs	r3, #2
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	4818      	ldr	r0, [pc, #96]	; (80022a0 <HAL_TIM_MspPostInit+0x108>)
 800223e:	f000 fc01 	bl	8002a44 <HAL_GPIO_Init>
}
 8002242:	e023      	b.n	800228c <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM4)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <HAL_TIM_MspPostInit+0x10c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d11e      	bne.n	800228c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 8002258:	f043 0308 	orr.w	r3, r3, #8
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_TIM_MspPostInit+0xfc>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800226a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800227c:	2302      	movs	r3, #2
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	4808      	ldr	r0, [pc, #32]	; (80022a8 <HAL_TIM_MspPostInit+0x110>)
 8002288:	f000 fbdc 	bl	8002a44 <HAL_GPIO_Init>
}
 800228c:	bf00      	nop
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	40020000 	.word	0x40020000
 800229c:	40000400 	.word	0x40000400
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40000800 	.word	0x40000800
 80022a8:	40020c00 	.word	0x40020c00

080022ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	; 0x30
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a32      	ldr	r2, [pc, #200]	; (8002394 <HAL_UART_MspInit+0xe8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d12c      	bne.n	8002328 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	4b31      	ldr	r3, [pc, #196]	; (8002398 <HAL_UART_MspInit+0xec>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a30      	ldr	r2, [pc, #192]	; (8002398 <HAL_UART_MspInit+0xec>)
 80022d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
 80022de:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <HAL_UART_MspInit+0xec>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_UART_MspInit+0xec>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a29      	ldr	r2, [pc, #164]	; (8002398 <HAL_UART_MspInit+0xec>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b27      	ldr	r3, [pc, #156]	; (8002398 <HAL_UART_MspInit+0xec>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002306:	2303      	movs	r3, #3
 8002308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800230e:	2301      	movs	r3, #1
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002316:	2308      	movs	r3, #8
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 031c 	add.w	r3, r7, #28
 800231e:	4619      	mov	r1, r3
 8002320:	481e      	ldr	r0, [pc, #120]	; (800239c <HAL_UART_MspInit+0xf0>)
 8002322:	f000 fb8f 	bl	8002a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8002326:	e031      	b.n	800238c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==UART7)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_UART_MspInit+0xf4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d12c      	bne.n	800238c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_UART_MspInit+0xec>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a17      	ldr	r2, [pc, #92]	; (8002398 <HAL_UART_MspInit+0xec>)
 800233c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_UART_MspInit+0xec>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_UART_MspInit+0xec>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a10      	ldr	r2, [pc, #64]	; (8002398 <HAL_UART_MspInit+0xec>)
 8002358:	f043 0310 	orr.w	r3, r3, #16
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_UART_MspInit+0xec>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800236a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800236e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002374:	2301      	movs	r3, #1
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002378:	2303      	movs	r3, #3
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800237c:	2308      	movs	r3, #8
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002380:	f107 031c 	add.w	r3, r7, #28
 8002384:	4619      	mov	r1, r3
 8002386:	4807      	ldr	r0, [pc, #28]	; (80023a4 <HAL_UART_MspInit+0xf8>)
 8002388:	f000 fb5c 	bl	8002a44 <HAL_GPIO_Init>
}
 800238c:	bf00      	nop
 800238e:	3730      	adds	r7, #48	; 0x30
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40004c00 	.word	0x40004c00
 8002398:	40023800 	.word	0x40023800
 800239c:	40020000 	.word	0x40020000
 80023a0:	40007800 	.word	0x40007800
 80023a4:	40021000 	.word	0x40021000

080023a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <HardFault_Handler+0x4>

080023bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <MemManage_Handler+0x4>

080023c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <BusFault_Handler+0x4>

080023c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <UsageFault_Handler+0x4>

080023ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fc:	f000 f894 	bl	8002528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}

08002404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <SystemInit+0x28>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	4a07      	ldr	r2, [pc, #28]	; (800242c <SystemInit+0x28>)
 8002410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <SystemInit+0x28>)
 800241a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800241e:	609a      	str	r2, [r3, #8]
#endif
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002468 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002434:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002436:	e003      	b.n	8002440 <LoopCopyDataInit>

08002438 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800243a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800243c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800243e:	3104      	adds	r1, #4

08002440 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002440:	480b      	ldr	r0, [pc, #44]	; (8002470 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002444:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002446:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002448:	d3f6      	bcc.n	8002438 <CopyDataInit>
  ldr  r2, =_sbss
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800244c:	e002      	b.n	8002454 <LoopFillZerobss>

0800244e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800244e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002450:	f842 3b04 	str.w	r3, [r2], #4

08002454 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002456:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002458:	d3f9      	bcc.n	800244e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800245a:	f7ff ffd3 	bl	8002404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800245e:	f002 ff45 	bl	80052ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002462:	f7fe fee7 	bl	8001234 <main>
  bx  lr    
 8002466:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002468:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800246c:	08005384 	.word	0x08005384
  ldr  r0, =_sdata
 8002470:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002474:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002478:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800247c:	200003c0 	.word	0x200003c0

08002480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002480:	e7fe      	b.n	8002480 <ADC_IRQHandler>
	...

08002484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <HAL_Init+0x40>)
 800248e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <HAL_Init+0x40>)
 800249a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800249e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a07      	ldr	r2, [pc, #28]	; (80024c4 <HAL_Init+0x40>)
 80024a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ac:	2003      	movs	r0, #3
 80024ae:	f000 f92f 	bl	8002710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b2:	2000      	movs	r0, #0
 80024b4:	f000 f808 	bl	80024c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b8:	f7ff fc2c 	bl	8001d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00

080024c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_InitTick+0x54>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_InitTick+0x58>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024de:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f939 	bl	800275e <HAL_SYSTICK_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00e      	b.n	8002514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b0f      	cmp	r3, #15
 80024fa:	d80a      	bhi.n	8002512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024fc:	2200      	movs	r2, #0
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f000 f90f 	bl	8002726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002508:	4a06      	ldr	r2, [pc, #24]	; (8002524 <HAL_InitTick+0x5c>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000000 	.word	0x20000000
 8002520:	20000008 	.word	0x20000008
 8002524:	20000004 	.word	0x20000004

08002528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_IncTick+0x20>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_IncTick+0x24>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4413      	add	r3, r2
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <HAL_IncTick+0x24>)
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	20000008 	.word	0x20000008
 800254c:	200003bc 	.word	0x200003bc

08002550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return uwTick;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_GetTick+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	200003bc 	.word	0x200003bc

08002568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002570:	f7ff ffee 	bl	8002550 <HAL_GetTick>
 8002574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d005      	beq.n	800258e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_Delay+0x40>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800258e:	bf00      	nop
 8002590:	f7ff ffde 	bl	8002550 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d8f7      	bhi.n	8002590 <HAL_Delay+0x28>
  {
  }
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000008 	.word	0x20000008

080025ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db0a      	blt.n	800263a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	490c      	ldr	r1, [pc, #48]	; (800265c <__NVIC_SetPriority+0x4c>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	440b      	add	r3, r1
 8002634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002638:	e00a      	b.n	8002650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4908      	ldr	r1, [pc, #32]	; (8002660 <__NVIC_SetPriority+0x50>)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3b04      	subs	r3, #4
 8002648:	0112      	lsls	r2, r2, #4
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	440b      	add	r3, r1
 800264e:	761a      	strb	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f1c3 0307 	rsb	r3, r3, #7
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf28      	it	cs
 8002682:	2304      	movcs	r3, #4
 8002684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3304      	adds	r3, #4
 800268a:	2b06      	cmp	r3, #6
 800268c:	d902      	bls.n	8002694 <NVIC_EncodePriority+0x30>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3b03      	subs	r3, #3
 8002692:	e000      	b.n	8002696 <NVIC_EncodePriority+0x32>
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43d9      	mvns	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	4313      	orrs	r3, r2
         );
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3724      	adds	r7, #36	; 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026dc:	d301      	bcc.n	80026e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026de:	2301      	movs	r3, #1
 80026e0:	e00f      	b.n	8002702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <SysTick_Config+0x40>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ea:	210f      	movs	r1, #15
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f7ff ff8e 	bl	8002610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <SysTick_Config+0x40>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <SysTick_Config+0x40>)
 80026fc:	2207      	movs	r2, #7
 80026fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	e000e010 	.word	0xe000e010

08002710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ff47 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002738:	f7ff ff5c 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 800273c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	6978      	ldr	r0, [r7, #20]
 8002744:	f7ff ff8e 	bl	8002664 <NVIC_EncodePriority>
 8002748:	4602      	mov	r2, r0
 800274a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff5d 	bl	8002610 <__NVIC_SetPriority>
}
 8002756:	bf00      	nop
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffb0 	bl	80026cc <SysTick_Config>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e00e      	b.n	80027a6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	795b      	ldrb	r3, [r3, #5]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d105      	bne.n	800279e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff fae3 	bl	8001d64 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e014      	b.n	80027ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	791b      	ldrb	r3, [r3, #4]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d105      	bne.n	80027d6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fae9 	bl	8001da8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2202      	movs	r2, #2
 80027da:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b087      	sub	sp, #28
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	795b      	ldrb	r3, [r3, #5]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_DAC_ConfigChannel+0x20>
 800280e:	2302      	movs	r3, #2
 8002810:	e036      	b.n	8002880 <HAL_DAC_ConfigChannel+0x8e>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2202      	movs	r2, #2
 800281c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002826:	f640 72fe 	movw	r2, #4094	; 0xffe
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4013      	ands	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	22c0      	movs	r2, #192	; 0xc0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43da      	mvns	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	400a      	ands	r2, r1
 8002870:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e03b      	b.n	8002916 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff fabc 	bl	8001e30 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	f023 0107 	bic.w	r1, r3, #7
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68d1      	ldr	r1, [r2, #12]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	430b      	orrs	r3, r1
 8002904:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_DMA2D_ConfigLayer+0x20>
 800293c:	2302      	movs	r3, #2
 800293e:	e079      	b.n	8002a34 <HAL_DMA2D_ConfigLayer+0x114>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	3318      	adds	r3, #24
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	041b      	lsls	r3, r3, #16
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800296a:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_DMA2D_ConfigLayer+0x120>)
 800296c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b0a      	cmp	r3, #10
 8002974:	d003      	beq.n	800297e <HAL_DMA2D_ConfigLayer+0x5e>
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b09      	cmp	r3, #9
 800297c:	d107      	bne.n	800298e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	e005      	b.n	800299a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	061b      	lsls	r3, r3, #24
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d120      	bne.n	80029e2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	ea02 0103 	and.w	r1, r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b0a      	cmp	r3, #10
 80029c8:	d003      	beq.n	80029d2 <HAL_DMA2D_ConfigLayer+0xb2>
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	d127      	bne.n	8002a22 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
 80029e0:	e01f      	b.n	8002a22 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	ea02 0103 	and.w	r1, r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b0a      	cmp	r3, #10
 8002a0a:	d003      	beq.n	8002a14 <HAL_DMA2D_ConfigLayer+0xf4>
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b09      	cmp	r3, #9
 8002a12:	d106      	bne.n	8002a22 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002a20:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	ff03000f 	.word	0xff03000f

08002a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	e177      	b.n	8002d50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a60:	2201      	movs	r2, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	f040 8166 	bne.w	8002d4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d00b      	beq.n	8002a9e <HAL_GPIO_Init+0x5a>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d007      	beq.n	8002a9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a92:	2b11      	cmp	r3, #17
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b12      	cmp	r3, #18
 8002a9c:	d130      	bne.n	8002b00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 0201 	and.w	r2, r3, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0xfc>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b12      	cmp	r3, #18
 8002b3e:	d123      	bne.n	8002b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	08da      	lsrs	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3208      	adds	r2, #8
 8002b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	220f      	movs	r2, #15
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	08da      	lsrs	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3208      	adds	r2, #8
 8002b82:	69b9      	ldr	r1, [r7, #24]
 8002b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0203 	and.w	r2, r3, #3
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80c0 	beq.w	8002d4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b65      	ldr	r3, [pc, #404]	; (8002d64 <HAL_GPIO_Init+0x320>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a64      	ldr	r2, [pc, #400]	; (8002d64 <HAL_GPIO_Init+0x320>)
 8002bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b62      	ldr	r3, [pc, #392]	; (8002d64 <HAL_GPIO_Init+0x320>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002be6:	4a60      	ldr	r2, [pc, #384]	; (8002d68 <HAL_GPIO_Init+0x324>)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	3302      	adds	r3, #2
 8002bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a57      	ldr	r2, [pc, #348]	; (8002d6c <HAL_GPIO_Init+0x328>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d037      	beq.n	8002c82 <HAL_GPIO_Init+0x23e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a56      	ldr	r2, [pc, #344]	; (8002d70 <HAL_GPIO_Init+0x32c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d031      	beq.n	8002c7e <HAL_GPIO_Init+0x23a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a55      	ldr	r2, [pc, #340]	; (8002d74 <HAL_GPIO_Init+0x330>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d02b      	beq.n	8002c7a <HAL_GPIO_Init+0x236>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a54      	ldr	r2, [pc, #336]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d025      	beq.n	8002c76 <HAL_GPIO_Init+0x232>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a53      	ldr	r2, [pc, #332]	; (8002d7c <HAL_GPIO_Init+0x338>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d01f      	beq.n	8002c72 <HAL_GPIO_Init+0x22e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_GPIO_Init+0x33c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d019      	beq.n	8002c6e <HAL_GPIO_Init+0x22a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a51      	ldr	r2, [pc, #324]	; (8002d84 <HAL_GPIO_Init+0x340>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <HAL_GPIO_Init+0x226>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_GPIO_Init+0x344>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00d      	beq.n	8002c66 <HAL_GPIO_Init+0x222>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	; (8002d8c <HAL_GPIO_Init+0x348>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d007      	beq.n	8002c62 <HAL_GPIO_Init+0x21e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4e      	ldr	r2, [pc, #312]	; (8002d90 <HAL_GPIO_Init+0x34c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_GPIO_Init+0x21a>
 8002c5a:	2309      	movs	r3, #9
 8002c5c:	e012      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c5e:	230a      	movs	r3, #10
 8002c60:	e010      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c62:	2308      	movs	r3, #8
 8002c64:	e00e      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c66:	2307      	movs	r3, #7
 8002c68:	e00c      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c6a:	2306      	movs	r3, #6
 8002c6c:	e00a      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c6e:	2305      	movs	r3, #5
 8002c70:	e008      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c72:	2304      	movs	r3, #4
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c76:	2303      	movs	r3, #3
 8002c78:	e004      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c82:	2300      	movs	r3, #0
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	f002 0203 	and.w	r2, r2, #3
 8002c8a:	0092      	lsls	r2, r2, #2
 8002c8c:	4093      	lsls	r3, r2
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c94:	4934      	ldr	r1, [pc, #208]	; (8002d68 <HAL_GPIO_Init+0x324>)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca2:	4b3c      	ldr	r3, [pc, #240]	; (8002d94 <HAL_GPIO_Init+0x350>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc6:	4a33      	ldr	r2, [pc, #204]	; (8002d94 <HAL_GPIO_Init+0x350>)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ccc:	4b31      	ldr	r3, [pc, #196]	; (8002d94 <HAL_GPIO_Init+0x350>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cf0:	4a28      	ldr	r2, [pc, #160]	; (8002d94 <HAL_GPIO_Init+0x350>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf6:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <HAL_GPIO_Init+0x350>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d1a:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_GPIO_Init+0x350>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d20:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <HAL_GPIO_Init+0x350>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d44:	4a13      	ldr	r2, [pc, #76]	; (8002d94 <HAL_GPIO_Init+0x350>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b0f      	cmp	r3, #15
 8002d54:	f67f ae84 	bls.w	8002a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3724      	adds	r7, #36	; 0x24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40013800 	.word	0x40013800
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	40020400 	.word	0x40020400
 8002d74:	40020800 	.word	0x40020800
 8002d78:	40020c00 	.word	0x40020c00
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40021400 	.word	0x40021400
 8002d84:	40021800 	.word	0x40021800
 8002d88:	40021c00 	.word	0x40021c00
 8002d8c:	40022000 	.word	0x40022000
 8002d90:	40022400 	.word	0x40022400
 8002d94:	40013c00 	.word	0x40013c00

08002d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	807b      	strh	r3, [r7, #2]
 8002da4:	4613      	mov	r3, r2
 8002da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da8:	787b      	ldrb	r3, [r7, #1]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002db4:	e003      	b.n	8002dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002db6:	887b      	ldrh	r3, [r7, #2]
 8002db8:	041a      	lsls	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	619a      	str	r2, [r3, #24]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0bf      	b.n	8002f5e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff f83e 	bl	8001e74 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002e0e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6999      	ldr	r1, [r3, #24]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e24:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6899      	ldr	r1, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b4a      	ldr	r3, [pc, #296]	; (8002f68 <HAL_LTDC_Init+0x19c>)
 8002e40:	400b      	ands	r3, r1
 8002e42:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6899      	ldr	r1, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68d9      	ldr	r1, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b3e      	ldr	r3, [pc, #248]	; (8002f68 <HAL_LTDC_Init+0x19c>)
 8002e6e:	400b      	ands	r3, r1
 8002e70:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	041b      	lsls	r3, r3, #16
 8002e78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68d9      	ldr	r1, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6919      	ldr	r1, [r3, #16]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b33      	ldr	r3, [pc, #204]	; (8002f68 <HAL_LTDC_Init+0x19c>)
 8002e9c:	400b      	ands	r3, r1
 8002e9e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6919      	ldr	r1, [r3, #16]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6959      	ldr	r1, [r3, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <HAL_LTDC_Init+0x19c>)
 8002eca:	400b      	ands	r3, r1
 8002ecc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	041b      	lsls	r3, r3, #16
 8002ed4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6959      	ldr	r1, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0206 	orr.w	r2, r2, #6
 8002f3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	f000f800 	.word	0xf000f800

08002f6c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f6c:	b5b0      	push	{r4, r5, r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_LTDC_ConfigLayer+0x1a>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e02c      	b.n	8002fe0 <HAL_LTDC_ConfigLayer+0x74>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2134      	movs	r1, #52	; 0x34
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4614      	mov	r4, r2
 8002faa:	461d      	mov	r5, r3
 8002fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fb8:	682b      	ldr	r3, [r5, #0]
 8002fba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f811 	bl	8002fe8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bdb0      	pop	{r4, r5, r7, pc}

08002fe8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	0c1b      	lsrs	r3, r3, #16
 8003000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003004:	4413      	add	r3, r2
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	01db      	lsls	r3, r3, #7
 8003014:	4413      	add	r3, r2
 8003016:	3384      	adds	r3, #132	; 0x84
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	4611      	mov	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	01d2      	lsls	r2, r2, #7
 8003024:	440a      	add	r2, r1
 8003026:	3284      	adds	r2, #132	; 0x84
 8003028:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800302c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303e:	4413      	add	r3, r2
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4619      	mov	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	01db      	lsls	r3, r3, #7
 800304c:	440b      	add	r3, r1
 800304e:	3384      	adds	r3, #132	; 0x84
 8003050:	4619      	mov	r1, r3
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003066:	4413      	add	r3, r2
 8003068:	041b      	lsls	r3, r3, #16
 800306a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	01db      	lsls	r3, r3, #7
 8003076:	4413      	add	r3, r2
 8003078:	3384      	adds	r3, #132	; 0x84
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	4611      	mov	r1, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	01d2      	lsls	r2, r2, #7
 8003086:	440a      	add	r2, r1
 8003088:	3284      	adds	r2, #132	; 0x84
 800308a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800308e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800309e:	4413      	add	r3, r2
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4619      	mov	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	01db      	lsls	r3, r3, #7
 80030ac:	440b      	add	r3, r1
 80030ae:	3384      	adds	r3, #132	; 0x84
 80030b0:	4619      	mov	r1, r3
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	01db      	lsls	r3, r3, #7
 80030c2:	4413      	add	r3, r2
 80030c4:	3384      	adds	r3, #132	; 0x84
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	4611      	mov	r1, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	01d2      	lsls	r2, r2, #7
 80030d2:	440a      	add	r2, r1
 80030d4:	3284      	adds	r2, #132	; 0x84
 80030d6:	f023 0307 	bic.w	r3, r3, #7
 80030da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	01db      	lsls	r3, r3, #7
 80030e6:	4413      	add	r3, r2
 80030e8:	3384      	adds	r3, #132	; 0x84
 80030ea:	461a      	mov	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003102:	041b      	lsls	r3, r3, #16
 8003104:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	061b      	lsls	r3, r3, #24
 800310c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	01db      	lsls	r3, r3, #7
 8003118:	4413      	add	r3, r2
 800311a:	3384      	adds	r3, #132	; 0x84
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	01db      	lsls	r3, r3, #7
 8003128:	4413      	add	r3, r2
 800312a:	3384      	adds	r3, #132	; 0x84
 800312c:	461a      	mov	r2, r3
 800312e:	2300      	movs	r3, #0
 8003130:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003138:	461a      	mov	r2, r3
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	431a      	orrs	r2, r3
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	431a      	orrs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4619      	mov	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	01db      	lsls	r3, r3, #7
 800314c:	440b      	add	r3, r1
 800314e:	3384      	adds	r3, #132	; 0x84
 8003150:	4619      	mov	r1, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	01db      	lsls	r3, r3, #7
 8003162:	4413      	add	r3, r2
 8003164:	3384      	adds	r3, #132	; 0x84
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	4611      	mov	r1, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	01d2      	lsls	r2, r2, #7
 8003172:	440a      	add	r2, r1
 8003174:	3284      	adds	r2, #132	; 0x84
 8003176:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800317a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	01db      	lsls	r3, r3, #7
 8003186:	4413      	add	r3, r2
 8003188:	3384      	adds	r3, #132	; 0x84
 800318a:	461a      	mov	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	01db      	lsls	r3, r3, #7
 800319c:	4413      	add	r3, r2
 800319e:	3384      	adds	r3, #132	; 0x84
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	4611      	mov	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	01d2      	lsls	r2, r2, #7
 80031ac:	440a      	add	r2, r1
 80031ae:	3284      	adds	r2, #132	; 0x84
 80031b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031b4:	f023 0307 	bic.w	r3, r3, #7
 80031b8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	68f9      	ldr	r1, [r7, #12]
 80031c4:	6809      	ldr	r1, [r1, #0]
 80031c6:	4608      	mov	r0, r1
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	01c9      	lsls	r1, r1, #7
 80031cc:	4401      	add	r1, r0
 80031ce:	3184      	adds	r1, #132	; 0x84
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	01db      	lsls	r3, r3, #7
 80031de:	4413      	add	r3, r2
 80031e0:	3384      	adds	r3, #132	; 0x84
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	01db      	lsls	r3, r3, #7
 80031ee:	4413      	add	r3, r2
 80031f0:	3384      	adds	r3, #132	; 0x84
 80031f2:	461a      	mov	r2, r3
 80031f4:	2300      	movs	r3, #0
 80031f6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	01db      	lsls	r3, r3, #7
 8003202:	4413      	add	r3, r2
 8003204:	3384      	adds	r3, #132	; 0x84
 8003206:	461a      	mov	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003216:	2304      	movs	r3, #4
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e01b      	b.n	8003254 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d102      	bne.n	800322a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003224:	2303      	movs	r3, #3
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	e014      	b.n	8003254 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b04      	cmp	r3, #4
 8003230:	d00b      	beq.n	800324a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003236:	2b02      	cmp	r3, #2
 8003238:	d007      	beq.n	800324a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800323e:	2b03      	cmp	r3, #3
 8003240:	d003      	beq.n	800324a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003246:	2b07      	cmp	r3, #7
 8003248:	d102      	bne.n	8003250 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800324a:	2302      	movs	r3, #2
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	e001      	b.n	8003254 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003250:	2301      	movs	r3, #1
 8003252:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	01db      	lsls	r3, r3, #7
 800325e:	4413      	add	r3, r2
 8003260:	3384      	adds	r3, #132	; 0x84
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	4611      	mov	r1, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	01d2      	lsls	r2, r2, #7
 800326e:	440a      	add	r2, r1
 8003270:	3284      	adds	r2, #132	; 0x84
 8003272:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003276:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	041a      	lsls	r2, r3, #16
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	1acb      	subs	r3, r1, r3
 800328e:	69f9      	ldr	r1, [r7, #28]
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	3303      	adds	r3, #3
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	6809      	ldr	r1, [r1, #0]
 800329a:	4608      	mov	r0, r1
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	01c9      	lsls	r1, r1, #7
 80032a0:	4401      	add	r1, r0
 80032a2:	3184      	adds	r1, #132	; 0x84
 80032a4:	4313      	orrs	r3, r2
 80032a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	01db      	lsls	r3, r3, #7
 80032b2:	4413      	add	r3, r2
 80032b4:	3384      	adds	r3, #132	; 0x84
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	4611      	mov	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	01d2      	lsls	r2, r2, #7
 80032c2:	440a      	add	r2, r1
 80032c4:	3284      	adds	r2, #132	; 0x84
 80032c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80032ca:	f023 0307 	bic.w	r3, r3, #7
 80032ce:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	01db      	lsls	r3, r3, #7
 80032da:	4413      	add	r3, r2
 80032dc:	3384      	adds	r3, #132	; 0x84
 80032de:	461a      	mov	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	01db      	lsls	r3, r3, #7
 80032f0:	4413      	add	r3, r2
 80032f2:	3384      	adds	r3, #132	; 0x84
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	4611      	mov	r1, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	01d2      	lsls	r2, r2, #7
 8003300:	440a      	add	r2, r1
 8003302:	3284      	adds	r2, #132	; 0x84
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6013      	str	r3, [r2, #0]
}
 800330a:	bf00      	nop
 800330c:	3724      	adds	r7, #36	; 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e25b      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d075      	beq.n	8003422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003336:	4ba3      	ldr	r3, [pc, #652]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b04      	cmp	r3, #4
 8003340:	d00c      	beq.n	800335c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003342:	4ba0      	ldr	r3, [pc, #640]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334a:	2b08      	cmp	r3, #8
 800334c:	d112      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334e:	4b9d      	ldr	r3, [pc, #628]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800335a:	d10b      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	4b99      	ldr	r3, [pc, #612]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d05b      	beq.n	8003420 <HAL_RCC_OscConfig+0x108>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d157      	bne.n	8003420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e236      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337c:	d106      	bne.n	800338c <HAL_RCC_OscConfig+0x74>
 800337e:	4b91      	ldr	r3, [pc, #580]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a90      	ldr	r2, [pc, #576]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e01d      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x98>
 8003396:	4b8b      	ldr	r3, [pc, #556]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a8a      	ldr	r2, [pc, #552]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b88      	ldr	r3, [pc, #544]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a87      	ldr	r2, [pc, #540]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 80033b0:	4b84      	ldr	r3, [pc, #528]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a83      	ldr	r2, [pc, #524]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b81      	ldr	r3, [pc, #516]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a80      	ldr	r2, [pc, #512]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7ff f8be 	bl	8002550 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d8:	f7ff f8ba 	bl	8002550 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e1fb      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0xc0>
 80033f6:	e014      	b.n	8003422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7ff f8aa 	bl	8002550 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003400:	f7ff f8a6 	bl	8002550 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e1e7      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	4b6c      	ldr	r3, [pc, #432]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0xe8>
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d063      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800342e:	4b65      	ldr	r3, [pc, #404]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343a:	4b62      	ldr	r3, [pc, #392]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003442:	2b08      	cmp	r3, #8
 8003444:	d11c      	bne.n	8003480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003446:	4b5f      	ldr	r3, [pc, #380]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d116      	bne.n	8003480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	4b5c      	ldr	r3, [pc, #368]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_RCC_OscConfig+0x152>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d001      	beq.n	800346a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e1bb      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346a:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4952      	ldr	r1, [pc, #328]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	e03a      	b.n	80034f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d020      	beq.n	80034ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003488:	4b4f      	ldr	r3, [pc, #316]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348e:	f7ff f85f 	bl	8002550 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003496:	f7ff f85b 	bl	8002550 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e19c      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b4:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4940      	ldr	r1, [pc, #256]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
 80034c8:	e015      	b.n	80034f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ca:	4b3f      	ldr	r3, [pc, #252]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7ff f83e 	bl	8002550 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d8:	f7ff f83a 	bl	8002550 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e17b      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d030      	beq.n	8003564 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350a:	4b30      	ldr	r3, [pc, #192]	; (80035cc <HAL_RCC_OscConfig+0x2b4>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7ff f81e 	bl	8002550 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003518:	f7ff f81a 	bl	8002550 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e15b      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x200>
 8003536:	e015      	b.n	8003564 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003538:	4b24      	ldr	r3, [pc, #144]	; (80035cc <HAL_RCC_OscConfig+0x2b4>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353e:	f7ff f807 	bl	8002550 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003546:	f7ff f803 	bl	8002550 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e144      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80a0 	beq.w	80036b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10f      	bne.n	80035a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	4a0e      	ldr	r2, [pc, #56]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	6413      	str	r3, [r2, #64]	; 0x40
 8003592:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_OscConfig+0x2b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d121      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <HAL_RCC_OscConfig+0x2b8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <HAL_RCC_OscConfig+0x2b8>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fe ffc9 	bl	8002550 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	e011      	b.n	80035e6 <HAL_RCC_OscConfig+0x2ce>
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	42470000 	.word	0x42470000
 80035cc:	42470e80 	.word	0x42470e80
 80035d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d4:	f7fe ffbc 	bl	8002550 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e0fd      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	4b81      	ldr	r3, [pc, #516]	; (80037ec <HAL_RCC_OscConfig+0x4d4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d106      	bne.n	8003608 <HAL_RCC_OscConfig+0x2f0>
 80035fa:	4b7d      	ldr	r3, [pc, #500]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a7c      	ldr	r2, [pc, #496]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	e01c      	b.n	8003642 <HAL_RCC_OscConfig+0x32a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b05      	cmp	r3, #5
 800360e:	d10c      	bne.n	800362a <HAL_RCC_OscConfig+0x312>
 8003610:	4b77      	ldr	r3, [pc, #476]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	4a76      	ldr	r2, [pc, #472]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 8003616:	f043 0304 	orr.w	r3, r3, #4
 800361a:	6713      	str	r3, [r2, #112]	; 0x70
 800361c:	4b74      	ldr	r3, [pc, #464]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	4a73      	ldr	r2, [pc, #460]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6713      	str	r3, [r2, #112]	; 0x70
 8003628:	e00b      	b.n	8003642 <HAL_RCC_OscConfig+0x32a>
 800362a:	4b71      	ldr	r3, [pc, #452]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a70      	ldr	r2, [pc, #448]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	4b6e      	ldr	r3, [pc, #440]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a6d      	ldr	r2, [pc, #436]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d015      	beq.n	8003676 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364a:	f7fe ff81 	bl	8002550 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fe ff7d 	bl	8002550 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0bc      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003668:	4b61      	ldr	r3, [pc, #388]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ee      	beq.n	8003652 <HAL_RCC_OscConfig+0x33a>
 8003674:	e014      	b.n	80036a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003676:	f7fe ff6b 	bl	8002550 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367c:	e00a      	b.n	8003694 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fe ff67 	bl	8002550 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e0a6      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003694:	4b56      	ldr	r3, [pc, #344]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ee      	bne.n	800367e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a6:	4b52      	ldr	r3, [pc, #328]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a51      	ldr	r2, [pc, #324]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 80036ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8092 	beq.w	80037e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036bc:	4b4c      	ldr	r3, [pc, #304]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d05c      	beq.n	8003782 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d141      	bne.n	8003754 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d0:	4b48      	ldr	r3, [pc, #288]	; (80037f4 <HAL_RCC_OscConfig+0x4dc>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d6:	f7fe ff3b 	bl	8002550 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036de:	f7fe ff37 	bl	8002550 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e078      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f0:	4b3f      	ldr	r3, [pc, #252]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	019b      	lsls	r3, r3, #6
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	3b01      	subs	r3, #1
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	061b      	lsls	r3, r3, #24
 8003720:	4933      	ldr	r1, [pc, #204]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003726:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <HAL_RCC_OscConfig+0x4dc>)
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe ff10 	bl	8002550 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe ff0c 	bl	8002550 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e04d      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003746:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x41c>
 8003752:	e045      	b.n	80037e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003754:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <HAL_RCC_OscConfig+0x4dc>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fe fef9 	bl	8002550 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003762:	f7fe fef5 	bl	8002550 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e036      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003774:	4b1e      	ldr	r3, [pc, #120]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f0      	bne.n	8003762 <HAL_RCC_OscConfig+0x44a>
 8003780:	e02e      	b.n	80037e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e029      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800378e:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <HAL_RCC_OscConfig+0x4d8>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d11c      	bne.n	80037dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d115      	bne.n	80037dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b6:	4013      	ands	r3, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037bc:	4293      	cmp	r3, r2
 80037be:	d10d      	bne.n	80037dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d106      	bne.n	80037dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40007000 	.word	0x40007000
 80037f0:	40023800 	.word	0x40023800
 80037f4:	42470060 	.word	0x42470060

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0cc      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d90c      	bls.n	8003834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b8      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800384c:	4b59      	ldr	r3, [pc, #356]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003864:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a52      	ldr	r2, [pc, #328]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	494d      	ldr	r1, [pc, #308]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d044      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e067      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4934      	ldr	r1, [pc, #208]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7fe fe32 	bl	8002550 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fe fe2e 	bl	8002550 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20c      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e032      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4916      	ldr	r1, [pc, #88]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397e:	f000 f821 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003982:	4601      	mov	r1, r0
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	5cd3      	ldrb	r3, [r2, r3]
 8003992:	fa21 f303 	lsr.w	r3, r1, r3
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fd92 	bl	80024c8 <HAL_InitTick>

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	0800535c 	.word	0x0800535c
 80039bc:	20000000 	.word	0x20000000
 80039c0:	20000004 	.word	0x20000004

080039c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	2300      	movs	r3, #0
 80039d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039da:	4b50      	ldr	r3, [pc, #320]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x158>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d007      	beq.n	80039f6 <HAL_RCC_GetSysClockFreq+0x32>
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d008      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x38>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 808d 	bne.w	8003b0a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f0:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x15c>)
 80039f2:	60bb      	str	r3, [r7, #8]
       break;
 80039f4:	e08c      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039f6:	4b4b      	ldr	r3, [pc, #300]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x160>)
 80039f8:	60bb      	str	r3, [r7, #8]
      break;
 80039fa:	e089      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039fc:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x158>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a06:	4b45      	ldr	r3, [pc, #276]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d023      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a12:	4b42      	ldr	r3, [pc, #264]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	099b      	lsrs	r3, r3, #6
 8003a18:	f04f 0400 	mov.w	r4, #0
 8003a1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	ea03 0501 	and.w	r5, r3, r1
 8003a28:	ea04 0602 	and.w	r6, r4, r2
 8003a2c:	4a3d      	ldr	r2, [pc, #244]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a2e:	fb02 f106 	mul.w	r1, r2, r6
 8003a32:	2200      	movs	r2, #0
 8003a34:	fb02 f205 	mul.w	r2, r2, r5
 8003a38:	440a      	add	r2, r1
 8003a3a:	493a      	ldr	r1, [pc, #232]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a3c:	fba5 0101 	umull	r0, r1, r5, r1
 8003a40:	1853      	adds	r3, r2, r1
 8003a42:	4619      	mov	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f04f 0400 	mov.w	r4, #0
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4623      	mov	r3, r4
 8003a4e:	f7fc ffbd 	bl	80009cc <__aeabi_uldivmod>
 8003a52:	4603      	mov	r3, r0
 8003a54:	460c      	mov	r4, r1
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	e049      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5a:	4b30      	ldr	r3, [pc, #192]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	f04f 0400 	mov.w	r4, #0
 8003a64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	ea03 0501 	and.w	r5, r3, r1
 8003a70:	ea04 0602 	and.w	r6, r4, r2
 8003a74:	4629      	mov	r1, r5
 8003a76:	4632      	mov	r2, r6
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	f04f 0400 	mov.w	r4, #0
 8003a80:	0154      	lsls	r4, r2, #5
 8003a82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a86:	014b      	lsls	r3, r1, #5
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	1b49      	subs	r1, r1, r5
 8003a8e:	eb62 0206 	sbc.w	r2, r2, r6
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	f04f 0400 	mov.w	r4, #0
 8003a9a:	0194      	lsls	r4, r2, #6
 8003a9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003aa0:	018b      	lsls	r3, r1, #6
 8003aa2:	1a5b      	subs	r3, r3, r1
 8003aa4:	eb64 0402 	sbc.w	r4, r4, r2
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	00e2      	lsls	r2, r4, #3
 8003ab2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ab6:	00d9      	lsls	r1, r3, #3
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4614      	mov	r4, r2
 8003abc:	195b      	adds	r3, r3, r5
 8003abe:	eb44 0406 	adc.w	r4, r4, r6
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	02a2      	lsls	r2, r4, #10
 8003acc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ad0:	0299      	lsls	r1, r3, #10
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4614      	mov	r4, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	4621      	mov	r1, r4
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f04f 0400 	mov.w	r4, #0
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	f7fc ff72 	bl	80009cc <__aeabi_uldivmod>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x158>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	0c1b      	lsrs	r3, r3, #16
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	3301      	adds	r3, #1
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b06:	60bb      	str	r3, [r7, #8]
      break;
 8003b08:	e002      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b0c:	60bb      	str	r3, [r7, #8]
      break;
 8003b0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b10:	68bb      	ldr	r3, [r7, #8]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	00f42400 	.word	0x00f42400
 8003b24:	017d7840 	.word	0x017d7840

08003b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b2c:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000000 	.word	0x20000000

08003b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b44:	f7ff fff0 	bl	8003b28 <HAL_RCC_GetHCLKFreq>
 8003b48:	4601      	mov	r1, r0
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	0a9b      	lsrs	r3, r3, #10
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	4a03      	ldr	r2, [pc, #12]	; (8003b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40023800 	.word	0x40023800
 8003b64:	0800536c 	.word	0x0800536c

08003b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b6c:	f7ff ffdc 	bl	8003b28 <HAL_RCC_GetHCLKFreq>
 8003b70:	4601      	mov	r1, r0
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	0b5b      	lsrs	r3, r3, #13
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4a03      	ldr	r2, [pc, #12]	; (8003b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b7e:	5cd3      	ldrb	r3, [r2, r3]
 8003b80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	0800536c 	.word	0x0800536c

08003b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d075      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bc4:	4bad      	ldr	r3, [pc, #692]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bca:	f7fe fcc1 	bl	8002550 <HAL_GetTick>
 8003bce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bd2:	f7fe fcbd 	bl	8002550 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e18b      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003be4:	4ba6      	ldr	r3, [pc, #664]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f0      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	019a      	lsls	r2, r3, #6
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	071b      	lsls	r3, r3, #28
 8003c08:	499d      	ldr	r1, [pc, #628]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01f      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c1c:	4b98      	ldr	r3, [pc, #608]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c22:	0f1b      	lsrs	r3, r3, #28
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	019a      	lsls	r2, r3, #6
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	431a      	orrs	r2, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	071b      	lsls	r3, r3, #28
 8003c3c:	4990      	ldr	r1, [pc, #576]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c44:	4b8e      	ldr	r3, [pc, #568]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c4a:	f023 021f 	bic.w	r2, r3, #31
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	498a      	ldr	r1, [pc, #552]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00d      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	019a      	lsls	r2, r3, #6
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	061b      	lsls	r3, r3, #24
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	071b      	lsls	r3, r3, #28
 8003c7c:	4980      	ldr	r1, [pc, #512]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c84:	4b7d      	ldr	r3, [pc, #500]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c8a:	f7fe fc61 	bl	8002550 <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c92:	f7fe fc5d 	bl	8002550 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e12b      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ca4:	4b76      	ldr	r3, [pc, #472]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d079      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cc8:	4b6e      	ldr	r3, [pc, #440]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cce:	f7fe fc3f 	bl	8002550 <HAL_GetTick>
 8003cd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003cd6:	f7fe fc3b 	bl	8002550 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e109      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ce8:	4b65      	ldr	r3, [pc, #404]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf4:	d0ef      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d020      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d02:	4b5f      	ldr	r3, [pc, #380]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	0f1b      	lsrs	r3, r3, #28
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	019a      	lsls	r2, r3, #6
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	061b      	lsls	r3, r3, #24
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	071b      	lsls	r3, r3, #28
 8003d22:	4957      	ldr	r1, [pc, #348]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d2a:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	4950      	ldr	r1, [pc, #320]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01e      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d50:	4b4b      	ldr	r3, [pc, #300]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	0e1b      	lsrs	r3, r3, #24
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	019a      	lsls	r2, r3, #6
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	071b      	lsls	r3, r3, #28
 8003d70:	4943      	ldr	r1, [pc, #268]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d78:	4b41      	ldr	r3, [pc, #260]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	493e      	ldr	r1, [pc, #248]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d8e:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d94:	f7fe fbdc 	bl	8002550 <HAL_GetTick>
 8003d98:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d9c:	f7fe fbd8 	bl	8002550 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e0a6      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dae:	4b34      	ldr	r3, [pc, #208]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dba:	d1ef      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 808d 	beq.w	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	4b2c      	ldr	r3, [pc, #176]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a2b      	ldr	r2, [pc, #172]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b29      	ldr	r3, [pc, #164]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003de6:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a27      	ldr	r2, [pc, #156]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003df2:	f7fe fbad 	bl	8002550 <HAL_GetTick>
 8003df6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7fe fba9 	bl	8002550 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e077      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e0c:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e18:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d039      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d032      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e40:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e4c:	4a0c      	ldr	r2, [pc, #48]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e52:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d11e      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e5e:	f7fe fb77 	bl	8002550 <HAL_GetTick>
 8003e62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e64:	e014      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e66:	f7fe fb73 	bl	8002550 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d90b      	bls.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e03f      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003e7c:	42470068 	.word	0x42470068
 8003e80:	40023800 	.word	0x40023800
 8003e84:	42470070 	.word	0x42470070
 8003e88:	40007000 	.word	0x40007000
 8003e8c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e90:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0e4      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ea8:	d10d      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003eaa:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebe:	4911      	ldr	r1, [pc, #68]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]
 8003ec4:	e005      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	4a0e      	ldr	r2, [pc, #56]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ecc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ed0:	6093      	str	r3, [r2, #8]
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ed4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ede:	4909      	ldr	r1, [pc, #36]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003ef6:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003ef8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40023800 	.word	0x40023800
 8003f08:	424711e0 	.word	0x424711e0

08003f0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e056      	b.n	8003fcc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7fe f877 	bl	800202c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f54:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	ea42 0103 	orr.w	r1, r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	0c1b      	lsrs	r3, r3, #16
 8003f9c:	f003 0104 	and.w	r1, r3, #4
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e01d      	b.n	8004022 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fe f85e 	bl	80020bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f000 fa14 	bl	8004440 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b06      	cmp	r3, #6
 800404a:	d007      	beq.n	800405c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e01d      	b.n	80040c0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d106      	bne.n	800409e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7fe f831 	bl	8002100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f000 f9c5 	bl	8004440 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2201      	movs	r2, #1
 80040d8:	6839      	ldr	r1, [r7, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fc9a 	bl	8004a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <HAL_TIM_PWM_Start+0x74>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_TIM_PWM_Start+0x2c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a14      	ldr	r2, [pc, #80]	; (8004140 <HAL_TIM_PWM_Start+0x78>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d101      	bne.n	80040f8 <HAL_TIM_PWM_Start+0x30>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <HAL_TIM_PWM_Start+0x32>
 80040f8:	2300      	movs	r3, #0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800410c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b06      	cmp	r3, #6
 800411e:	d007      	beq.n	8004130 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40010000 	.word	0x40010000
 8004140:	40010400 	.word	0x40010400

08004144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800415a:	2302      	movs	r3, #2
 800415c:	e0b4      	b.n	80042c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2202      	movs	r2, #2
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b0c      	cmp	r3, #12
 8004172:	f200 809f 	bhi.w	80042b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	080041b1 	.word	0x080041b1
 8004180:	080042b5 	.word	0x080042b5
 8004184:	080042b5 	.word	0x080042b5
 8004188:	080042b5 	.word	0x080042b5
 800418c:	080041f1 	.word	0x080041f1
 8004190:	080042b5 	.word	0x080042b5
 8004194:	080042b5 	.word	0x080042b5
 8004198:	080042b5 	.word	0x080042b5
 800419c:	08004233 	.word	0x08004233
 80041a0:	080042b5 	.word	0x080042b5
 80041a4:	080042b5 	.word	0x080042b5
 80041a8:	080042b5 	.word	0x080042b5
 80041ac:	08004273 	.word	0x08004273
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 f9e2 	bl	8004580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0208 	orr.w	r2, r2, #8
 80041ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0204 	bic.w	r2, r2, #4
 80041da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6999      	ldr	r1, [r3, #24]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	691a      	ldr	r2, [r3, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	619a      	str	r2, [r3, #24]
      break;
 80041ee:	e062      	b.n	80042b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fa32 	bl	8004660 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800420a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6999      	ldr	r1, [r3, #24]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	021a      	lsls	r2, r3, #8
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	619a      	str	r2, [r3, #24]
      break;
 8004230:	e041      	b.n	80042b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fa87 	bl	800474c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0208 	orr.w	r2, r2, #8
 800424c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0204 	bic.w	r2, r2, #4
 800425c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69d9      	ldr	r1, [r3, #28]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	61da      	str	r2, [r3, #28]
      break;
 8004270:	e021      	b.n	80042b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fadb 	bl	8004834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800428c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69d9      	ldr	r1, [r3, #28]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	021a      	lsls	r2, r3, #8
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	61da      	str	r2, [r3, #28]
      break;
 80042b2:	e000      	b.n	80042b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80042b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_TIM_ConfigClockSource+0x18>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e0a6      	b.n	8004436 <HAL_TIM_ConfigClockSource+0x166>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004306:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800430e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	d067      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x120>
 8004320:	2b40      	cmp	r3, #64	; 0x40
 8004322:	d80b      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x6c>
 8004324:	2b10      	cmp	r3, #16
 8004326:	d073      	beq.n	8004410 <HAL_TIM_ConfigClockSource+0x140>
 8004328:	2b10      	cmp	r3, #16
 800432a:	d802      	bhi.n	8004332 <HAL_TIM_ConfigClockSource+0x62>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d06f      	beq.n	8004410 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004330:	e078      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004332:	2b20      	cmp	r3, #32
 8004334:	d06c      	beq.n	8004410 <HAL_TIM_ConfigClockSource+0x140>
 8004336:	2b30      	cmp	r3, #48	; 0x30
 8004338:	d06a      	beq.n	8004410 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800433a:	e073      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800433c:	2b70      	cmp	r3, #112	; 0x70
 800433e:	d00d      	beq.n	800435c <HAL_TIM_ConfigClockSource+0x8c>
 8004340:	2b70      	cmp	r3, #112	; 0x70
 8004342:	d804      	bhi.n	800434e <HAL_TIM_ConfigClockSource+0x7e>
 8004344:	2b50      	cmp	r3, #80	; 0x50
 8004346:	d033      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0xe0>
 8004348:	2b60      	cmp	r3, #96	; 0x60
 800434a:	d041      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800434c:	e06a      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800434e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004352:	d066      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x152>
 8004354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004358:	d017      	beq.n	800438a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800435a:	e063      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6899      	ldr	r1, [r3, #8]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f000 fb32 	bl	80049d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800437e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	609a      	str	r2, [r3, #8]
      break;
 8004388:	e04c      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f000 fb1b 	bl	80049d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ac:	609a      	str	r2, [r3, #8]
      break;
 80043ae:	e039      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	461a      	mov	r2, r3
 80043be:	f000 fa8f 	bl	80048e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2150      	movs	r1, #80	; 0x50
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fae8 	bl	800499e <TIM_ITRx_SetConfig>
      break;
 80043ce:	e029      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	461a      	mov	r2, r3
 80043de:	f000 faae 	bl	800493e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2160      	movs	r1, #96	; 0x60
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fad8 	bl	800499e <TIM_ITRx_SetConfig>
      break;
 80043ee:	e019      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6859      	ldr	r1, [r3, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	461a      	mov	r2, r3
 80043fe:	f000 fa6f 	bl	80048e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2140      	movs	r1, #64	; 0x40
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fac8 	bl	800499e <TIM_ITRx_SetConfig>
      break;
 800440e:	e009      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4619      	mov	r1, r3
 800441a:	4610      	mov	r0, r2
 800441c:	f000 fabf 	bl	800499e <TIM_ITRx_SetConfig>
      break;
 8004420:	e000      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a40      	ldr	r2, [pc, #256]	; (8004554 <TIM_Base_SetConfig+0x114>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d00f      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a3d      	ldr	r2, [pc, #244]	; (8004558 <TIM_Base_SetConfig+0x118>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00b      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a3c      	ldr	r2, [pc, #240]	; (800455c <TIM_Base_SetConfig+0x11c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d007      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a3b      	ldr	r2, [pc, #236]	; (8004560 <TIM_Base_SetConfig+0x120>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a3a      	ldr	r2, [pc, #232]	; (8004564 <TIM_Base_SetConfig+0x124>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d108      	bne.n	8004492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a2f      	ldr	r2, [pc, #188]	; (8004554 <TIM_Base_SetConfig+0x114>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d02b      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a0:	d027      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a2c      	ldr	r2, [pc, #176]	; (8004558 <TIM_Base_SetConfig+0x118>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d023      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a2b      	ldr	r2, [pc, #172]	; (800455c <TIM_Base_SetConfig+0x11c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01f      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a2a      	ldr	r2, [pc, #168]	; (8004560 <TIM_Base_SetConfig+0x120>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01b      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a29      	ldr	r2, [pc, #164]	; (8004564 <TIM_Base_SetConfig+0x124>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d017      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a28      	ldr	r2, [pc, #160]	; (8004568 <TIM_Base_SetConfig+0x128>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a27      	ldr	r2, [pc, #156]	; (800456c <TIM_Base_SetConfig+0x12c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00f      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a26      	ldr	r2, [pc, #152]	; (8004570 <TIM_Base_SetConfig+0x130>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00b      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a25      	ldr	r2, [pc, #148]	; (8004574 <TIM_Base_SetConfig+0x134>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d007      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a24      	ldr	r2, [pc, #144]	; (8004578 <TIM_Base_SetConfig+0x138>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d003      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a23      	ldr	r2, [pc, #140]	; (800457c <TIM_Base_SetConfig+0x13c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d108      	bne.n	8004504 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a0a      	ldr	r2, [pc, #40]	; (8004554 <TIM_Base_SetConfig+0x114>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_Base_SetConfig+0xf8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a0c      	ldr	r2, [pc, #48]	; (8004564 <TIM_Base_SetConfig+0x124>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d103      	bne.n	8004540 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	615a      	str	r2, [r3, #20]
}
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40010000 	.word	0x40010000
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40010400 	.word	0x40010400
 8004568:	40014000 	.word	0x40014000
 800456c:	40014400 	.word	0x40014400
 8004570:	40014800 	.word	0x40014800
 8004574:	40001800 	.word	0x40001800
 8004578:	40001c00 	.word	0x40001c00
 800457c:	40002000 	.word	0x40002000

08004580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0201 	bic.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 0302 	bic.w	r3, r3, #2
 80045c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a20      	ldr	r2, [pc, #128]	; (8004658 <TIM_OC1_SetConfig+0xd8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d003      	beq.n	80045e4 <TIM_OC1_SetConfig+0x64>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a1f      	ldr	r2, [pc, #124]	; (800465c <TIM_OC1_SetConfig+0xdc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d10c      	bne.n	80045fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f023 0308 	bic.w	r3, r3, #8
 80045ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f023 0304 	bic.w	r3, r3, #4
 80045fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a15      	ldr	r2, [pc, #84]	; (8004658 <TIM_OC1_SetConfig+0xd8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d003      	beq.n	800460e <TIM_OC1_SetConfig+0x8e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a14      	ldr	r2, [pc, #80]	; (800465c <TIM_OC1_SetConfig+0xdc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d111      	bne.n	8004632 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800461c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	621a      	str	r2, [r3, #32]
}
 800464c:	bf00      	nop
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	40010000 	.word	0x40010000
 800465c:	40010400 	.word	0x40010400

08004660 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	f023 0210 	bic.w	r2, r3, #16
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0320 	bic.w	r3, r3, #32
 80046aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a22      	ldr	r2, [pc, #136]	; (8004744 <TIM_OC2_SetConfig+0xe4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_OC2_SetConfig+0x68>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a21      	ldr	r2, [pc, #132]	; (8004748 <TIM_OC2_SetConfig+0xe8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d10d      	bne.n	80046e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a17      	ldr	r2, [pc, #92]	; (8004744 <TIM_OC2_SetConfig+0xe4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_OC2_SetConfig+0x94>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a16      	ldr	r2, [pc, #88]	; (8004748 <TIM_OC2_SetConfig+0xe8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d113      	bne.n	800471c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004702:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40010000 	.word	0x40010000
 8004748:	40010400 	.word	0x40010400

0800474c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a21      	ldr	r2, [pc, #132]	; (800482c <TIM_OC3_SetConfig+0xe0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_OC3_SetConfig+0x66>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a20      	ldr	r2, [pc, #128]	; (8004830 <TIM_OC3_SetConfig+0xe4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10d      	bne.n	80047ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a16      	ldr	r2, [pc, #88]	; (800482c <TIM_OC3_SetConfig+0xe0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d003      	beq.n	80047de <TIM_OC3_SetConfig+0x92>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a15      	ldr	r2, [pc, #84]	; (8004830 <TIM_OC3_SetConfig+0xe4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d113      	bne.n	8004806 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	621a      	str	r2, [r3, #32]
}
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	40010000 	.word	0x40010000
 8004830:	40010400 	.word	0x40010400

08004834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800487e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <TIM_OC4_SetConfig+0xa4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_OC4_SetConfig+0x68>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a11      	ldr	r2, [pc, #68]	; (80048dc <TIM_OC4_SetConfig+0xa8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d109      	bne.n	80048b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	019b      	lsls	r3, r3, #6
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	621a      	str	r2, [r3, #32]
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40010400 	.word	0x40010400

080048e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f023 0201 	bic.w	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 030a 	bic.w	r3, r3, #10
 800491c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800493e:	b480      	push	{r7}
 8004940:	b087      	sub	sp, #28
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f023 0210 	bic.w	r2, r3, #16
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	031b      	lsls	r3, r3, #12
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800497a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f043 0307 	orr.w	r3, r3, #7
 80049c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	609a      	str	r2, [r3, #8]
}
 80049c8:	bf00      	nop
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	021a      	lsls	r2, r3, #8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	609a      	str	r2, [r3, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2201      	movs	r2, #1
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1a      	ldr	r2, [r3, #32]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	401a      	ands	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a1a      	ldr	r2, [r3, #32]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	621a      	str	r2, [r3, #32]
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e05a      	b.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d022      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac4:	d01d      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d018      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d009      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a15      	ldr	r2, [pc, #84]	; (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d10c      	bne.n	8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800
 8004b48:	40000c00 	.word	0x40000c00
 8004b4c:	40010400 	.word	0x40010400
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40001800 	.word	0x40001800

08004b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e03f      	b.n	8004bea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fd fb94 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2224      	movs	r2, #36	; 0x24
 8004b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f829 	bl	8004bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004c36:	f023 030c 	bic.w	r3, r3, #12
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	68f9      	ldr	r1, [r7, #12]
 8004c40:	430b      	orrs	r3, r1
 8004c42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c62:	f040 818b 	bne.w	8004f7c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4ac1      	ldr	r2, [pc, #772]	; (8004f70 <UART_SetConfig+0x37c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d005      	beq.n	8004c7c <UART_SetConfig+0x88>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4abf      	ldr	r2, [pc, #764]	; (8004f74 <UART_SetConfig+0x380>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	f040 80bd 	bne.w	8004df6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c7c:	f7fe ff74 	bl	8003b68 <HAL_RCC_GetPCLK2Freq>
 8004c80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	461d      	mov	r5, r3
 8004c86:	f04f 0600 	mov.w	r6, #0
 8004c8a:	46a8      	mov	r8, r5
 8004c8c:	46b1      	mov	r9, r6
 8004c8e:	eb18 0308 	adds.w	r3, r8, r8
 8004c92:	eb49 0409 	adc.w	r4, r9, r9
 8004c96:	4698      	mov	r8, r3
 8004c98:	46a1      	mov	r9, r4
 8004c9a:	eb18 0805 	adds.w	r8, r8, r5
 8004c9e:	eb49 0906 	adc.w	r9, r9, r6
 8004ca2:	f04f 0100 	mov.w	r1, #0
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004cae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004cb6:	4688      	mov	r8, r1
 8004cb8:	4691      	mov	r9, r2
 8004cba:	eb18 0005 	adds.w	r0, r8, r5
 8004cbe:	eb49 0106 	adc.w	r1, r9, r6
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	461d      	mov	r5, r3
 8004cc8:	f04f 0600 	mov.w	r6, #0
 8004ccc:	196b      	adds	r3, r5, r5
 8004cce:	eb46 0406 	adc.w	r4, r6, r6
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	4623      	mov	r3, r4
 8004cd6:	f7fb fe79 	bl	80009cc <__aeabi_uldivmod>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	460c      	mov	r4, r1
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4ba5      	ldr	r3, [pc, #660]	; (8004f78 <UART_SetConfig+0x384>)
 8004ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	461d      	mov	r5, r3
 8004cf0:	f04f 0600 	mov.w	r6, #0
 8004cf4:	46a9      	mov	r9, r5
 8004cf6:	46b2      	mov	sl, r6
 8004cf8:	eb19 0309 	adds.w	r3, r9, r9
 8004cfc:	eb4a 040a 	adc.w	r4, sl, sl
 8004d00:	4699      	mov	r9, r3
 8004d02:	46a2      	mov	sl, r4
 8004d04:	eb19 0905 	adds.w	r9, r9, r5
 8004d08:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d0c:	f04f 0100 	mov.w	r1, #0
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d20:	4689      	mov	r9, r1
 8004d22:	4692      	mov	sl, r2
 8004d24:	eb19 0005 	adds.w	r0, r9, r5
 8004d28:	eb4a 0106 	adc.w	r1, sl, r6
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	461d      	mov	r5, r3
 8004d32:	f04f 0600 	mov.w	r6, #0
 8004d36:	196b      	adds	r3, r5, r5
 8004d38:	eb46 0406 	adc.w	r4, r6, r6
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4623      	mov	r3, r4
 8004d40:	f7fb fe44 	bl	80009cc <__aeabi_uldivmod>
 8004d44:	4603      	mov	r3, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4b8b      	ldr	r3, [pc, #556]	; (8004f78 <UART_SetConfig+0x384>)
 8004d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	2164      	movs	r1, #100	; 0x64
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	3332      	adds	r3, #50	; 0x32
 8004d5e:	4a86      	ldr	r2, [pc, #536]	; (8004f78 <UART_SetConfig+0x384>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d6c:	4498      	add	r8, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	461d      	mov	r5, r3
 8004d72:	f04f 0600 	mov.w	r6, #0
 8004d76:	46a9      	mov	r9, r5
 8004d78:	46b2      	mov	sl, r6
 8004d7a:	eb19 0309 	adds.w	r3, r9, r9
 8004d7e:	eb4a 040a 	adc.w	r4, sl, sl
 8004d82:	4699      	mov	r9, r3
 8004d84:	46a2      	mov	sl, r4
 8004d86:	eb19 0905 	adds.w	r9, r9, r5
 8004d8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d8e:	f04f 0100 	mov.w	r1, #0
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004da2:	4689      	mov	r9, r1
 8004da4:	4692      	mov	sl, r2
 8004da6:	eb19 0005 	adds.w	r0, r9, r5
 8004daa:	eb4a 0106 	adc.w	r1, sl, r6
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	461d      	mov	r5, r3
 8004db4:	f04f 0600 	mov.w	r6, #0
 8004db8:	196b      	adds	r3, r5, r5
 8004dba:	eb46 0406 	adc.w	r4, r6, r6
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4623      	mov	r3, r4
 8004dc2:	f7fb fe03 	bl	80009cc <__aeabi_uldivmod>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	460c      	mov	r4, r1
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b6a      	ldr	r3, [pc, #424]	; (8004f78 <UART_SetConfig+0x384>)
 8004dce:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	2164      	movs	r1, #100	; 0x64
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	3332      	adds	r3, #50	; 0x32
 8004de0:	4a65      	ldr	r2, [pc, #404]	; (8004f78 <UART_SetConfig+0x384>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	f003 0207 	and.w	r2, r3, #7
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4442      	add	r2, r8
 8004df2:	609a      	str	r2, [r3, #8]
 8004df4:	e26f      	b.n	80052d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004df6:	f7fe fea3 	bl	8003b40 <HAL_RCC_GetPCLK1Freq>
 8004dfa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	461d      	mov	r5, r3
 8004e00:	f04f 0600 	mov.w	r6, #0
 8004e04:	46a8      	mov	r8, r5
 8004e06:	46b1      	mov	r9, r6
 8004e08:	eb18 0308 	adds.w	r3, r8, r8
 8004e0c:	eb49 0409 	adc.w	r4, r9, r9
 8004e10:	4698      	mov	r8, r3
 8004e12:	46a1      	mov	r9, r4
 8004e14:	eb18 0805 	adds.w	r8, r8, r5
 8004e18:	eb49 0906 	adc.w	r9, r9, r6
 8004e1c:	f04f 0100 	mov.w	r1, #0
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e30:	4688      	mov	r8, r1
 8004e32:	4691      	mov	r9, r2
 8004e34:	eb18 0005 	adds.w	r0, r8, r5
 8004e38:	eb49 0106 	adc.w	r1, r9, r6
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	461d      	mov	r5, r3
 8004e42:	f04f 0600 	mov.w	r6, #0
 8004e46:	196b      	adds	r3, r5, r5
 8004e48:	eb46 0406 	adc.w	r4, r6, r6
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4623      	mov	r3, r4
 8004e50:	f7fb fdbc 	bl	80009cc <__aeabi_uldivmod>
 8004e54:	4603      	mov	r3, r0
 8004e56:	460c      	mov	r4, r1
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <UART_SetConfig+0x384>)
 8004e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	461d      	mov	r5, r3
 8004e6a:	f04f 0600 	mov.w	r6, #0
 8004e6e:	46a9      	mov	r9, r5
 8004e70:	46b2      	mov	sl, r6
 8004e72:	eb19 0309 	adds.w	r3, r9, r9
 8004e76:	eb4a 040a 	adc.w	r4, sl, sl
 8004e7a:	4699      	mov	r9, r3
 8004e7c:	46a2      	mov	sl, r4
 8004e7e:	eb19 0905 	adds.w	r9, r9, r5
 8004e82:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e86:	f04f 0100 	mov.w	r1, #0
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e9a:	4689      	mov	r9, r1
 8004e9c:	4692      	mov	sl, r2
 8004e9e:	eb19 0005 	adds.w	r0, r9, r5
 8004ea2:	eb4a 0106 	adc.w	r1, sl, r6
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	461d      	mov	r5, r3
 8004eac:	f04f 0600 	mov.w	r6, #0
 8004eb0:	196b      	adds	r3, r5, r5
 8004eb2:	eb46 0406 	adc.w	r4, r6, r6
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4623      	mov	r3, r4
 8004eba:	f7fb fd87 	bl	80009cc <__aeabi_uldivmod>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4b2c      	ldr	r3, [pc, #176]	; (8004f78 <UART_SetConfig+0x384>)
 8004ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	2164      	movs	r1, #100	; 0x64
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	3332      	adds	r3, #50	; 0x32
 8004ed8:	4a27      	ldr	r2, [pc, #156]	; (8004f78 <UART_SetConfig+0x384>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ee6:	4498      	add	r8, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	461d      	mov	r5, r3
 8004eec:	f04f 0600 	mov.w	r6, #0
 8004ef0:	46a9      	mov	r9, r5
 8004ef2:	46b2      	mov	sl, r6
 8004ef4:	eb19 0309 	adds.w	r3, r9, r9
 8004ef8:	eb4a 040a 	adc.w	r4, sl, sl
 8004efc:	4699      	mov	r9, r3
 8004efe:	46a2      	mov	sl, r4
 8004f00:	eb19 0905 	adds.w	r9, r9, r5
 8004f04:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f08:	f04f 0100 	mov.w	r1, #0
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f1c:	4689      	mov	r9, r1
 8004f1e:	4692      	mov	sl, r2
 8004f20:	eb19 0005 	adds.w	r0, r9, r5
 8004f24:	eb4a 0106 	adc.w	r1, sl, r6
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	461d      	mov	r5, r3
 8004f2e:	f04f 0600 	mov.w	r6, #0
 8004f32:	196b      	adds	r3, r5, r5
 8004f34:	eb46 0406 	adc.w	r4, r6, r6
 8004f38:	461a      	mov	r2, r3
 8004f3a:	4623      	mov	r3, r4
 8004f3c:	f7fb fd46 	bl	80009cc <__aeabi_uldivmod>
 8004f40:	4603      	mov	r3, r0
 8004f42:	460c      	mov	r4, r1
 8004f44:	461a      	mov	r2, r3
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <UART_SetConfig+0x384>)
 8004f48:	fba3 1302 	umull	r1, r3, r3, r2
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	2164      	movs	r1, #100	; 0x64
 8004f50:	fb01 f303 	mul.w	r3, r1, r3
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	3332      	adds	r3, #50	; 0x32
 8004f5a:	4a07      	ldr	r2, [pc, #28]	; (8004f78 <UART_SetConfig+0x384>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	f003 0207 	and.w	r2, r3, #7
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4442      	add	r2, r8
 8004f6c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004f6e:	e1b2      	b.n	80052d6 <UART_SetConfig+0x6e2>
 8004f70:	40011000 	.word	0x40011000
 8004f74:	40011400 	.word	0x40011400
 8004f78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4ad7      	ldr	r2, [pc, #860]	; (80052e0 <UART_SetConfig+0x6ec>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d005      	beq.n	8004f92 <UART_SetConfig+0x39e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4ad6      	ldr	r2, [pc, #856]	; (80052e4 <UART_SetConfig+0x6f0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	f040 80d1 	bne.w	8005134 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f92:	f7fe fde9 	bl	8003b68 <HAL_RCC_GetPCLK2Freq>
 8004f96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	469a      	mov	sl, r3
 8004f9c:	f04f 0b00 	mov.w	fp, #0
 8004fa0:	46d0      	mov	r8, sl
 8004fa2:	46d9      	mov	r9, fp
 8004fa4:	eb18 0308 	adds.w	r3, r8, r8
 8004fa8:	eb49 0409 	adc.w	r4, r9, r9
 8004fac:	4698      	mov	r8, r3
 8004fae:	46a1      	mov	r9, r4
 8004fb0:	eb18 080a 	adds.w	r8, r8, sl
 8004fb4:	eb49 090b 	adc.w	r9, r9, fp
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004fc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004fc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004fcc:	4688      	mov	r8, r1
 8004fce:	4691      	mov	r9, r2
 8004fd0:	eb1a 0508 	adds.w	r5, sl, r8
 8004fd4:	eb4b 0609 	adc.w	r6, fp, r9
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	f04f 0400 	mov.w	r4, #0
 8004fea:	0094      	lsls	r4, r2, #2
 8004fec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ff0:	008b      	lsls	r3, r1, #2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4623      	mov	r3, r4
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	4631      	mov	r1, r6
 8004ffa:	f7fb fce7 	bl	80009cc <__aeabi_uldivmod>
 8004ffe:	4603      	mov	r3, r0
 8005000:	460c      	mov	r4, r1
 8005002:	461a      	mov	r2, r3
 8005004:	4bb8      	ldr	r3, [pc, #736]	; (80052e8 <UART_SetConfig+0x6f4>)
 8005006:	fba3 2302 	umull	r2, r3, r3, r2
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	469b      	mov	fp, r3
 8005014:	f04f 0c00 	mov.w	ip, #0
 8005018:	46d9      	mov	r9, fp
 800501a:	46e2      	mov	sl, ip
 800501c:	eb19 0309 	adds.w	r3, r9, r9
 8005020:	eb4a 040a 	adc.w	r4, sl, sl
 8005024:	4699      	mov	r9, r3
 8005026:	46a2      	mov	sl, r4
 8005028:	eb19 090b 	adds.w	r9, r9, fp
 800502c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005030:	f04f 0100 	mov.w	r1, #0
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800503c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005040:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005044:	4689      	mov	r9, r1
 8005046:	4692      	mov	sl, r2
 8005048:	eb1b 0509 	adds.w	r5, fp, r9
 800504c:	eb4c 060a 	adc.w	r6, ip, sl
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	4619      	mov	r1, r3
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	f04f 0400 	mov.w	r4, #0
 8005062:	0094      	lsls	r4, r2, #2
 8005064:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005068:	008b      	lsls	r3, r1, #2
 800506a:	461a      	mov	r2, r3
 800506c:	4623      	mov	r3, r4
 800506e:	4628      	mov	r0, r5
 8005070:	4631      	mov	r1, r6
 8005072:	f7fb fcab 	bl	80009cc <__aeabi_uldivmod>
 8005076:	4603      	mov	r3, r0
 8005078:	460c      	mov	r4, r1
 800507a:	461a      	mov	r2, r3
 800507c:	4b9a      	ldr	r3, [pc, #616]	; (80052e8 <UART_SetConfig+0x6f4>)
 800507e:	fba3 1302 	umull	r1, r3, r3, r2
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	2164      	movs	r1, #100	; 0x64
 8005086:	fb01 f303 	mul.w	r3, r1, r3
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	3332      	adds	r3, #50	; 0x32
 8005090:	4a95      	ldr	r2, [pc, #596]	; (80052e8 <UART_SetConfig+0x6f4>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800509c:	4498      	add	r8, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	469b      	mov	fp, r3
 80050a2:	f04f 0c00 	mov.w	ip, #0
 80050a6:	46d9      	mov	r9, fp
 80050a8:	46e2      	mov	sl, ip
 80050aa:	eb19 0309 	adds.w	r3, r9, r9
 80050ae:	eb4a 040a 	adc.w	r4, sl, sl
 80050b2:	4699      	mov	r9, r3
 80050b4:	46a2      	mov	sl, r4
 80050b6:	eb19 090b 	adds.w	r9, r9, fp
 80050ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050be:	f04f 0100 	mov.w	r1, #0
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050d2:	4689      	mov	r9, r1
 80050d4:	4692      	mov	sl, r2
 80050d6:	eb1b 0509 	adds.w	r5, fp, r9
 80050da:	eb4c 060a 	adc.w	r6, ip, sl
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4619      	mov	r1, r3
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	f04f 0400 	mov.w	r4, #0
 80050f0:	0094      	lsls	r4, r2, #2
 80050f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050f6:	008b      	lsls	r3, r1, #2
 80050f8:	461a      	mov	r2, r3
 80050fa:	4623      	mov	r3, r4
 80050fc:	4628      	mov	r0, r5
 80050fe:	4631      	mov	r1, r6
 8005100:	f7fb fc64 	bl	80009cc <__aeabi_uldivmod>
 8005104:	4603      	mov	r3, r0
 8005106:	460c      	mov	r4, r1
 8005108:	461a      	mov	r2, r3
 800510a:	4b77      	ldr	r3, [pc, #476]	; (80052e8 <UART_SetConfig+0x6f4>)
 800510c:	fba3 1302 	umull	r1, r3, r3, r2
 8005110:	095b      	lsrs	r3, r3, #5
 8005112:	2164      	movs	r1, #100	; 0x64
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	3332      	adds	r3, #50	; 0x32
 800511e:	4a72      	ldr	r2, [pc, #456]	; (80052e8 <UART_SetConfig+0x6f4>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	f003 020f 	and.w	r2, r3, #15
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4442      	add	r2, r8
 8005130:	609a      	str	r2, [r3, #8]
 8005132:	e0d0      	b.n	80052d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005134:	f7fe fd04 	bl	8003b40 <HAL_RCC_GetPCLK1Freq>
 8005138:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	469a      	mov	sl, r3
 800513e:	f04f 0b00 	mov.w	fp, #0
 8005142:	46d0      	mov	r8, sl
 8005144:	46d9      	mov	r9, fp
 8005146:	eb18 0308 	adds.w	r3, r8, r8
 800514a:	eb49 0409 	adc.w	r4, r9, r9
 800514e:	4698      	mov	r8, r3
 8005150:	46a1      	mov	r9, r4
 8005152:	eb18 080a 	adds.w	r8, r8, sl
 8005156:	eb49 090b 	adc.w	r9, r9, fp
 800515a:	f04f 0100 	mov.w	r1, #0
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005166:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800516a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800516e:	4688      	mov	r8, r1
 8005170:	4691      	mov	r9, r2
 8005172:	eb1a 0508 	adds.w	r5, sl, r8
 8005176:	eb4b 0609 	adc.w	r6, fp, r9
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4619      	mov	r1, r3
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	f04f 0400 	mov.w	r4, #0
 800518c:	0094      	lsls	r4, r2, #2
 800518e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005192:	008b      	lsls	r3, r1, #2
 8005194:	461a      	mov	r2, r3
 8005196:	4623      	mov	r3, r4
 8005198:	4628      	mov	r0, r5
 800519a:	4631      	mov	r1, r6
 800519c:	f7fb fc16 	bl	80009cc <__aeabi_uldivmod>
 80051a0:	4603      	mov	r3, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	461a      	mov	r2, r3
 80051a6:	4b50      	ldr	r3, [pc, #320]	; (80052e8 <UART_SetConfig+0x6f4>)
 80051a8:	fba3 2302 	umull	r2, r3, r3, r2
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	469b      	mov	fp, r3
 80051b6:	f04f 0c00 	mov.w	ip, #0
 80051ba:	46d9      	mov	r9, fp
 80051bc:	46e2      	mov	sl, ip
 80051be:	eb19 0309 	adds.w	r3, r9, r9
 80051c2:	eb4a 040a 	adc.w	r4, sl, sl
 80051c6:	4699      	mov	r9, r3
 80051c8:	46a2      	mov	sl, r4
 80051ca:	eb19 090b 	adds.w	r9, r9, fp
 80051ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051d2:	f04f 0100 	mov.w	r1, #0
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051e6:	4689      	mov	r9, r1
 80051e8:	4692      	mov	sl, r2
 80051ea:	eb1b 0509 	adds.w	r5, fp, r9
 80051ee:	eb4c 060a 	adc.w	r6, ip, sl
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	4619      	mov	r1, r3
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	f04f 0400 	mov.w	r4, #0
 8005204:	0094      	lsls	r4, r2, #2
 8005206:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800520a:	008b      	lsls	r3, r1, #2
 800520c:	461a      	mov	r2, r3
 800520e:	4623      	mov	r3, r4
 8005210:	4628      	mov	r0, r5
 8005212:	4631      	mov	r1, r6
 8005214:	f7fb fbda 	bl	80009cc <__aeabi_uldivmod>
 8005218:	4603      	mov	r3, r0
 800521a:	460c      	mov	r4, r1
 800521c:	461a      	mov	r2, r3
 800521e:	4b32      	ldr	r3, [pc, #200]	; (80052e8 <UART_SetConfig+0x6f4>)
 8005220:	fba3 1302 	umull	r1, r3, r3, r2
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	2164      	movs	r1, #100	; 0x64
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	3332      	adds	r3, #50	; 0x32
 8005232:	4a2d      	ldr	r2, [pc, #180]	; (80052e8 <UART_SetConfig+0x6f4>)
 8005234:	fba2 2303 	umull	r2, r3, r2, r3
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800523e:	4498      	add	r8, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	469b      	mov	fp, r3
 8005244:	f04f 0c00 	mov.w	ip, #0
 8005248:	46d9      	mov	r9, fp
 800524a:	46e2      	mov	sl, ip
 800524c:	eb19 0309 	adds.w	r3, r9, r9
 8005250:	eb4a 040a 	adc.w	r4, sl, sl
 8005254:	4699      	mov	r9, r3
 8005256:	46a2      	mov	sl, r4
 8005258:	eb19 090b 	adds.w	r9, r9, fp
 800525c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005260:	f04f 0100 	mov.w	r1, #0
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800526c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005270:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005274:	4689      	mov	r9, r1
 8005276:	4692      	mov	sl, r2
 8005278:	eb1b 0509 	adds.w	r5, fp, r9
 800527c:	eb4c 060a 	adc.w	r6, ip, sl
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4619      	mov	r1, r3
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	f04f 0400 	mov.w	r4, #0
 8005292:	0094      	lsls	r4, r2, #2
 8005294:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005298:	008b      	lsls	r3, r1, #2
 800529a:	461a      	mov	r2, r3
 800529c:	4623      	mov	r3, r4
 800529e:	4628      	mov	r0, r5
 80052a0:	4631      	mov	r1, r6
 80052a2:	f7fb fb93 	bl	80009cc <__aeabi_uldivmod>
 80052a6:	4603      	mov	r3, r0
 80052a8:	460c      	mov	r4, r1
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <UART_SetConfig+0x6f4>)
 80052ae:	fba3 1302 	umull	r1, r3, r3, r2
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	2164      	movs	r1, #100	; 0x64
 80052b6:	fb01 f303 	mul.w	r3, r1, r3
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	3332      	adds	r3, #50	; 0x32
 80052c0:	4a09      	ldr	r2, [pc, #36]	; (80052e8 <UART_SetConfig+0x6f4>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	f003 020f 	and.w	r2, r3, #15
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4442      	add	r2, r8
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	e7ff      	b.n	80052d6 <UART_SetConfig+0x6e2>
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e0:	40011000 	.word	0x40011000
 80052e4:	40011400 	.word	0x40011400
 80052e8:	51eb851f 	.word	0x51eb851f

080052ec <__libc_init_array>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	4e0d      	ldr	r6, [pc, #52]	; (8005324 <__libc_init_array+0x38>)
 80052f0:	4c0d      	ldr	r4, [pc, #52]	; (8005328 <__libc_init_array+0x3c>)
 80052f2:	1ba4      	subs	r4, r4, r6
 80052f4:	10a4      	asrs	r4, r4, #2
 80052f6:	2500      	movs	r5, #0
 80052f8:	42a5      	cmp	r5, r4
 80052fa:	d109      	bne.n	8005310 <__libc_init_array+0x24>
 80052fc:	4e0b      	ldr	r6, [pc, #44]	; (800532c <__libc_init_array+0x40>)
 80052fe:	4c0c      	ldr	r4, [pc, #48]	; (8005330 <__libc_init_array+0x44>)
 8005300:	f000 f820 	bl	8005344 <_init>
 8005304:	1ba4      	subs	r4, r4, r6
 8005306:	10a4      	asrs	r4, r4, #2
 8005308:	2500      	movs	r5, #0
 800530a:	42a5      	cmp	r5, r4
 800530c:	d105      	bne.n	800531a <__libc_init_array+0x2e>
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005314:	4798      	blx	r3
 8005316:	3501      	adds	r5, #1
 8005318:	e7ee      	b.n	80052f8 <__libc_init_array+0xc>
 800531a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800531e:	4798      	blx	r3
 8005320:	3501      	adds	r5, #1
 8005322:	e7f2      	b.n	800530a <__libc_init_array+0x1e>
 8005324:	0800537c 	.word	0x0800537c
 8005328:	0800537c 	.word	0x0800537c
 800532c:	0800537c 	.word	0x0800537c
 8005330:	08005380 	.word	0x08005380

08005334 <memset>:
 8005334:	4402      	add	r2, r0
 8005336:	4603      	mov	r3, r0
 8005338:	4293      	cmp	r3, r2
 800533a:	d100      	bne.n	800533e <memset+0xa>
 800533c:	4770      	bx	lr
 800533e:	f803 1b01 	strb.w	r1, [r3], #1
 8005342:	e7f9      	b.n	8005338 <memset+0x4>

08005344 <_init>:
 8005344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005346:	bf00      	nop
 8005348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534a:	bc08      	pop	{r3}
 800534c:	469e      	mov	lr, r3
 800534e:	4770      	bx	lr

08005350 <_fini>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	bf00      	nop
 8005354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005356:	bc08      	pop	{r3}
 8005358:	469e      	mov	lr, r3
 800535a:	4770      	bx	lr
